//Generated by Generate_getModelAPIRouteNext13 - getModel API Route Next 13
import { Candidate } from "@/models/CandidateModel";
import { FindOptions, Sequelize } from "sequelize";
import { cloneDeep } from "lodash";
import { genericDelete, genericGetOne } from "@/utils/generic";
import { CandidateFormUpdatePayload } from "@/interfaces/CandidateInterfaces";
import { CandidateSchema } from "@/schema/CandidateSchema";
import sequelize from "@/config/db";
import handleSequelizeError from "@/utils/errorHandling";
import { returnJSONResponse, validateRequiredFields } from "@/utils/utils";
import { Op } from "sequelize";
import { updateCandidate } from "@/utils/api/CandidateLibs";
import { NextResponse } from "next/server";
import { PRIMARY_KEY } from "@/utils/constants/CandidateConstants";

//Generated by GetAllAPIRelatedRightModelImportBySeqModel
//Generated by GetAPIRelatedRightModelImport - GetAPIRelatedRightModelImport
import { Provider } from "@/models/ProviderModel";

const ModelObject = Candidate;

//Generated by GeneratefindOptions
const findOptions: FindOptions<typeof Candidate> = {
  //Generated by GenerateIncludeOption

  include: [
    {
      model: Provider,
      //Generated by GenerateAttributesOption

      attributes: ["id", "name", "slug"],
    },
  ],
  //Generated by GenerateAttributesOption

  attributes: [
    "candidateName",
    "source",
    "candidateState",
    "providerID",
    "providerState",
    "providerOffice",
    "providerSource",
    "providerType",
    "providerContactName",
    "providerEmail",
    "providerContactNumber",
    "email",
    "employer",
    "employerOffice",
    "employerState",
    "employerCandidateID",
    "employerCandidateOwner",
    "groupSite",
    "division",
    "wageSubsidyAmount",
    "benchmarkHours",
    "startDate",
    "status",
    "stage",
    "outcomeReminder",
    "payslipStatus",
    "priority",
    "placementSent",
    "placementStatus",
    "archive",
    "invoiced",
    "invoiceNumber",
    "enquiryDate",
    "enquiryType",
    "wSAgreement",
    "wSSchedule",
    "notes",
    "id",
  ],
};

export const GET = async (
  req: Request,
  { params }: { params: { id: string } }
) => {
  //Generated by Generate_findOptionsCopy
  const findOptionsCopy: FindOptions<typeof Candidate> = cloneDeep(findOptions);

  const id = params.id;
  return genericGetOne(ModelObject, findOptionsCopy, id);
};

//Generated by GetUpdateFunctionWithRelationshipNext13 - Update With Relationship Next 13
export const PUT = async (
  req: Request,
  { params }: { params: { id: string } }
) => {
  const res = (await req.json()) as CandidateFormUpdatePayload;
  const id = params.id;

  try {
    await CandidateSchema.validate(res);
  } catch (error: any) {
    return returnJSONResponse({
      status: "error",
      errorCode: 401,
      error: error.message,
    });
  }

  const t = await sequelize.transaction();

  try {
    await updateCandidate(res, PRIMARY_KEY, t, id);

    t.commit();
    return NextResponse.json({ status: "success" });
  } catch (err) {
    t.rollback();
    return handleSequelizeError(err);
  }
};

export const DELETE = async (
  req: Request,
  { params }: { params: { id: string } }
) => {
  const id = params.id;
  return genericDelete(ModelObject, id);
};
