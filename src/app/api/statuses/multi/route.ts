//Generated by WriteToMultiRoute_ts - multi route.ts
import sequelize from "@/config/db";
import { createStatus, updateStatus } from "@/utils/api/StatusLibs";
import { StatusUpdatePayload } from "@/interfaces/StatusInterfaces";
import { StatusSchema } from "@/schema/StatusSchema";
import { PRIMARY_KEY, UNIQUE_FIELDS } from "@/utils/constants/StatusConstants";
import handleSequelizeError from "@/utils/errorHandling";
import { checkDuplicateCombinations, returnJSONResponse } from "@/utils/utils";
import { NextResponse } from "next/server";

//Generated by GetMultiCreateModelPOSTRoute - GetMultiCreateModelPOSTRoute
export const POST = async (req: Request) => {
  const body = (await req.json()) as StatusUpdatePayload;
  const { Status } = body;

  //Generated by GenerateUniquenessValidation
  //Validate record uniqueness

  UNIQUE_FIELDS.forEach((item) => {
    const uniquenessError = checkDuplicateCombinations(item, Status);

    if (uniquenessError) {
      return returnJSONResponse({
        status: "error",
        error: uniquenessError,
        errorCode: 422,
      });
    }
  });

  const t = await sequelize.transaction();
  let recordsCreated = 0;

  for (const item of Status) {
    try {
      await StatusSchema.validate(item);
    } catch (error) {
      return handleSequelizeError(error);
    }
  }

  try {
    for (const item of Status) {
      if (item[PRIMARY_KEY] === "") {
        await createStatus(item, t);
        recordsCreated++;
      } else {
        await updateStatus(item, PRIMARY_KEY, t);
      }
    }

    await t.commit();

    return NextResponse.json({
      recordsCreated,
    });
  } catch (err) {
    await t.rollback();
    return handleSequelizeError(err);
  }
};;
