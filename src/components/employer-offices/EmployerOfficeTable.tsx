//Generated by WriteToModeltable_tsx - ModelTable.tsx
"use client";
//Generated by GeneratePageFile
import React, { useEffect, useState } from "react";
import { getAxiosParams } from "@/utils/utilities";
import { useEmployerOfficeStore } from "@/hooks/employer-offices/useEmployerOfficeStore";
import {
  EmployerOfficeFormikInitialValues,
  EmployerOfficeSearchParams,
  EmployerOfficeUpdatePayload,
  GetEmployerOfficesResponse,
  EmployerOfficeDeletePayload
} from "@/interfaces/EmployerOfficeInterfaces";
import axiosClient from "@/utils/api";
import {
  InfiniteData,
  useInfiniteQuery,
  useMutation,
  useQueryClient,
} from "@tanstack/react-query";
import { DEFAULT_LIMIT } from "@/utils/constants";
import { useURL } from "@/hooks/useURL";
import { Formik } from "formik";
import { EmployerOfficeArraySchema } from "@/schema/EmployerOfficeSchema";
import { toast } from "@/hooks/use-toast";
import {
  DEFAULT_FILTERS,
  DEFAULT_FORM_VALUE,
  DEFAULT_SORT_BY,
} from "@/utils/constants/EmployerOfficeConstants";
import { useEmployerOfficeDeleteDialog } from "@/hooks/employer-offices/useEmployerOfficeDeleteDialog";
import EmployerOfficeFormArray from "@/components/employer-offices/EmployerOfficeFormArray";

const EmployerOfficeTable: React.FC = () => {
  const { query } = useURL<EmployerOfficeSearchParams>();
  const queryClient = useQueryClient();

  ///Local States
  const [mounted, setMounted] = useState(false);

  //SearchParams Variables
  //Generated by GetAllSearchParamsBySeqModel
const q = query["q"] || ""
  const sort = query["sort"] || DEFAULT_SORT_BY;
  const limit = query["limit"] || DEFAULT_LIMIT;

  //Page constants
  const DEFAULT_EMPLOYEROFFICE = DEFAULT_FORM_VALUE;

  //Store Variables
  const {
    recordCount,
    setRecordCount,
    lastPage,
    setLastPage,
    setPage,
    fetchCount,
    setFetchCount,
    resetRowSelection,
    currentData,
    setCurrentData,
    setIsUpdating,
  } = useEmployerOfficeStore();

  const [setRecordsToDelete, setIsDialogLoading, setMutate] =
    useEmployerOfficeDeleteDialog((state) => [
      state.setRecordsToDelete,
      state.setIsDialogLoading,
      state.setMutate,
    ]);

  //API Functions
  const getEmployerOffices = async ({ pageParam = "" }) => {
    //First argument is the queries from the form, second one is so that the queries can be turned into the desired shape while the defaultFilters will be the searchParams not included from the from
    const axiosParams = getAxiosParams({//Generated by GetAllFilterQueryNameBySeqModel
q}, DEFAULT_FILTERS, {
      cursor: pageParam,
      limit,
      sort,
      fetchCount: fetchCount.toString(),
    }) as Partial<EmployerOfficeSearchParams>;

    const { data } = await axiosClient.get<GetEmployerOfficesResponse>(`employer-offices`, {
      params: axiosParams,
    });

    return data;
  };

  const updateEmployerOffices = async (payload: EmployerOfficeUpdatePayload) => {
    const { data } = await axiosClient({
      url: "employer-offices/multi",
      method: "post",
      data: payload,
    }) as { data: { recordsCreated: number } };

    return data;
  };

  const deleteEmployerOffices = async (payload: EmployerOfficeDeletePayload) => {
    const { data } = (await axiosClient({
      url: "employer-offices",
      method: "delete",
      data: payload,
    })) as { data: { recordsDeleted: number } };

    return data;
  };

  //API Functions end here

  //Tanstacks
  const { refetch } = useInfiniteQuery(["employerOffices"], getEmployerOffices, {
    keepPreviousData: true,
    getNextPageParam: (lastPage) => lastPage.cursor ?? undefined,
    onSuccess: (data) => {
      const dataPageLength = data.pages.length;
      const dataLastPageRowCount = data.pages[dataPageLength - 1].count;

      if (fetchCount) {
  setLastPage(1);
  setPage(1);
  setCurrentData([
    ...data.pages[0].rows.map((item, index) => ({
      ...item,
      index,
      touched: false,
    })),
    {
      ...DEFAULT_EMPLOYEROFFICE,
      index: data.pages[dataPageLength - 1].rows.length,
    },
  ]);
} else {
  if (dataPageLength > lastPage) {
    setLastPage(dataPageLength);
    setPage(dataPageLength);
    setCurrentData([
      ...data.pages[dataPageLength - 1].rows.map((item, index) => ({
        ...item,
        index,
        touched: false,
      })),
      {
        ...DEFAULT_EMPLOYEROFFICE,
        index: data.pages[dataPageLength - 1].rows.length,
      },
    ]);
  } else {
    setLastPage(1);
    setPage(1);
    setCurrentData([
      ...data.pages[0].rows.map((item, index) => ({
        ...item,
        index,
        touched: false,
      })),
      {
        ...DEFAULT_EMPLOYEROFFICE,
        index: data.pages[dataPageLength - 1].rows.length,
      },
    ]);
  }
}



      if (dataLastPageRowCount !== undefined) {
        setFetchCount(false);
        setRecordCount(dataLastPageRowCount);
      }
    },
    enabled: mounted, staleTime: Infinity,
  });

  //Generated by GetMutationSnippets
type MutationData = { recordsCreated?: number; recordsDeleted?: number };
  const useHandleMutation = (
    mutationFunction: (payload: any) => Promise<MutationData>,
    successCallback: (data: MutationData) => string,
    updateRecordCountCallback: (
      recordCount: number,
      data: MutationData
    ) => number
  ) => {
    const { mutate } = useMutation(mutationFunction, {
      onMutate: () => {
        setIsDialogLoading(true);
        setIsUpdating(true);
      },
      onSuccess: (data) => {
        toast({
          description: successCallback(data),
          variant: "success",
          duration: 2000,
        });
        resetRowSelection();
        setRecordCount(updateRecordCountCallback(recordCount, data));
        sliceQueryDataAndRefetch(0);
      },
      onError: (error) => {
        const responseText =
          //@ts-ignore
          error?.response?.statusText || "Something went wrong with the app";
        toast({
          description: responseText,
          variant: "destructive",
          duration: 2000,
        });
      },
      onSettled: () => {
        setIsDialogLoading(false);
        setIsUpdating(false);
        setRecordsToDelete([]);
      },
    });

    return mutate;
  };

  // Usage for deleteEmployerOfficeMutation
  const deleteEmployerOfficeMutation = useHandleMutation(
    deleteEmployerOffices,
    (data) => {
      return "Employer Office(s) deleted successfully";
    },
    (recordCount, data) => {
      return recordCount - (data.recordsDeleted || 0);
    }
  );

  // Usage for updateEmployerOffices
  const updateEmployerOfficesMutation = useHandleMutation(
    updateEmployerOffices,
    (data) => {
      return "Employer Office list updated successfully";
    },
    (recordCount, data) => {
      return (
        recordCount + (data.recordsCreated || 0) - (data.recordsDeleted || 0)
      );
    }
  );

  //Transformations
  const sliceQueryDataAndRefetch = (idx: number) => {
    queryClient.setQueryData(
      ["employerOffices"],
      (data: InfiniteData<GetEmployerOfficesResponse> | undefined) => {
        return data
          ? {
              pages: data.pages.slice(0, idx + 1),
              pageParams: data.pageParams.slice(0, idx + 1),
            }
          : undefined;
      }
    );
    refetch();
  };

  //Client Actions
  const handleSubmit = async (values: EmployerOfficeFormikInitialValues) => {
    //The reference is the index of the row
    const EmployerOfficesToBeSubmitted = values.EmployerOffices.filter((item) => item.touched);

    if (EmployerOfficesToBeSubmitted.length > 0) {
      const payload: EmployerOfficeUpdatePayload = {
        EmployerOffices: EmployerOfficesToBeSubmitted,
      };

      updateEmployerOfficesMutation(payload);
    }
  };

  useEffect(() => {
    setMounted(true);
    setMutate(deleteEmployerOfficeMutation);
  }, []);

  useEffect(() => {
    if (mounted) {
      sliceQueryDataAndRefetch(0);
    }
  }, [limit, sort, //Generated by GetAllFilterQueryNameBySeqModel
q]);

  return (
    <Formik
      initialValues={{
        EmployerOffices: currentData,
      }}
      enableReinitialize={true}
      onSubmit={handleSubmit}
      validationSchema={EmployerOfficeArraySchema}
      validateOnChange={false}
    >
      {(formik) => <EmployerOfficeFormArray formik={formik} />}
    </Formik>
  );
};

export default EmployerOfficeTable;
