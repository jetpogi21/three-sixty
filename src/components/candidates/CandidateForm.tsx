//Generated by WriteToModelform_tsx - ModelForm.tsx
"use client";
import {
  CandidateFormFormikInitialValues,
  CandidateModel,
  CandidateSearchParams,
} from "@/interfaces/CandidateInterfaces";
import {
  Form,
  Formik,
  FormikHelpers,
  FormikProps,
  useFormikContext,
} from "formik";
import React, { MouseEventHandler, useEffect, useRef, useState } from "react";
import {
  DEFAULT_FORM_VALUE,
  CONTROL_OPTIONS,
  PRIMARY_KEY,
} from "@/utils/constants/CandidateConstants";
import { useURL } from "@/hooks/useURL";
import FormikControl from "@/components/form/FormikControl";
import { Button } from "@/components/ui/Button";
import Breadcrumb from "@/components/ui/Breadcrumb";
import { sortData } from "@/utils/sort";
import { useCandidateStore } from "@/hooks/candidates/useCandidateStore";
import { toast } from "@/hooks/use-toast";
import { useCandidateQuery } from "@/hooks/candidates/useCandidateQuery";
import { convertArrayItemsToStrings } from "@/utils/utils";
import { CandidateSchema } from "@/schema/CandidateSchema";
import { Trash } from "lucide-react";
import { useCandidateDeleteDialog } from "@/hooks/candidates/useCandidateDeleteDialog";
import { CandidateDeleteDialog } from "@/components/candidates/CandidateDeleteDialog";

//Generated by GetAllModelFormRequiredRightModelListImport
//Generated by GetModelFormRequiredRightModelListImport - GetModelFormRequiredRightModelListImport
import useProviderList from "@/hooks/providers/useProviderList";

interface CandidateFormProps {
  data: CandidateModel | null;
  id: string;
}

const CandidateForm: React.FC<CandidateFormProps> = (prop) => {
  const { id } = prop;
  const { router, query, pathname } = useURL<CandidateSearchParams>();

  //Local states
  const [mounted, setMounted] = useState(false);
  const [recordName, setRecordName] = useState(
    prop.data ? prop.data.id.toString() : "New Candidate"
  );

  const ref = useRef<any>(null);

  //Zustand variables
  const { isUpdating, setIsUpdating, hasUpdate, setHasUpdate } =
    useCandidateStore((state) => ({
      isUpdating: state.isUpdating,
      setIsUpdating: state.setIsUpdating,
      hasUpdate: state.hasUpdate,
      setHasUpdate: state.setHasUpdate,
    }));

  const { setRecordsToDelete } = useCandidateDeleteDialog((state) => ({
    setRecordsToDelete: state.setRecordsToDelete,
  }));

  //Tanstack queries

  //Generated by GetAllRelatedRightModelListFromRelatedModel
  //Generated by GetRelatedRightModelListFromRelatedModel - GetRelatedRightModelListFromRelatedModel
  const providerPlaceholder: BasicModel[] = [];
  if (prop.data) {
    //Generated by GetAllRightModelPushPlaceholder
    //Generated by GetRightModelPushPlaceholder - GetRightModelPushPlaceholder
    prop.data.providerID &&
      !providerPlaceholder.some((item) => item.id === prop.data?.providerID) &&
      providerPlaceholder.push({
        id: prop.data.providerID,
        name: prop.data.Provider.name,
      });
  }
  const { data: providerList } = useProviderList({
    placeholderData: providerPlaceholder,
  });

  const { candidateMutation, candidateQuery } = useCandidateQuery(id, {
    enabled: mounted && id !== "new",
    initialData: prop.data,
  });

  const candidate = candidateQuery.data;

  const initialValues: CandidateFormFormikInitialValues = {
    ...DEFAULT_FORM_VALUE,
    //Generated by GetAllRightModelDefaultList
    //Generated by GetRightModelDefaultList - GetRightModelDefaultList
    providerID:
      providerList && providerList.length > 0 ? providerList[0].id : "",
  };

  if (candidate) {
    for (const key in initialValues) {
      if (candidate.hasOwnProperty(key) && initialValues.hasOwnProperty(key)) {
        //@ts-ignore
        //prettier-ignore
        initialValues[key] = candidate[key] === null ? "" : candidate[key];
      }
    }
  }

  const handleFocus = () => {
    ref && ref.current.focus();
  };

  const handleHasUdpate = () => {
    setHasUpdate(true);
  };

  const handleFormikSubmit = (
    values: CandidateFormFormikInitialValues,
    formik: FormikHelpers<CandidateFormFormikInitialValues>
  ) => {
    //@ts-ignore
    const addNew: boolean = values.addNew;

    const goToNewRecord = () => {
      formik.setValues({
        ...DEFAULT_FORM_VALUE,
      });
      window.history.pushState(
        {},
        "",
        `${window.location.origin}/candidates/new`
      );
      setRecordName("New Candidate");

      handleFocus();
    };

    if (hasUpdate) {
      const payload = {
        ...values,
      };

      candidateMutation
        .mutateAsync(payload)
        .then((data) => {
          if (addNew) {
            goToNewRecord();
          } else {
            if (data.id) {
              formik.setFieldValue("id", data.id);
            }

            if (data.id) {
              window.history.pushState(
                {},
                "",
                `${window.location.origin}/candidates/${data.id}`
              );
            }

            setRecordName(data.id ? data.id.toString() : values.id.toString());
          }

          toast({
            description: "Candidate list updated successfully",
            variant: "success",
            duration: 2000,
          });
        })
        .catch((err) => console.log(err));
    } else {
      if (addNew) {
        goToNewRecord();
      }
    }
  };

  const renderFormik = (
    formik: FormikProps<CandidateFormFormikInitialValues>
  ) => {
    const handleSubmitClick: MouseEventHandler = (e) => {
      e.preventDefault();
      formik.submitForm();
    };

    return (
      <Form
        className="flex flex-col flex-1 h-full gap-4"
        autoComplete="off"
      >
        {/* Generated by GetAllFormikControls */}
        {/* Generated by GetInputFormControl - Input Form Control */}
        <FormikControl
          name="candidateName"
          type="Text"
          label="Candidate Name"
          containerClassNames={["w-full"]}
          ref={ref}
          setFocusOnLoad={true}
          setHasUpdate={handleHasUdpate}
        />
        {/* Generated by GetInputFormControl - Input Form Control */}
        <FormikControl
          name="source"
          type="Text"
          label="Source"
          containerClassNames={["w-full"]}
          setHasUpdate={handleHasUdpate}
        />
        {/* Generated by GetComboBoxFormControl - GetComboBoxFormControl */}
        <FormikControl
          name="candidateState"
          options={CONTROL_OPTIONS.candidateState}
          type="ComboBox"
          showLabel={true}
          label="Candidate State"
          containerClassNames={["min-w-[200px]"]}
          setHasUpdate={handleHasUdpate}
        />
        {/* Generated by GetComboBoxFormControl - GetComboBoxFormControl */}
        <FormikControl
          name="providerID"
          options={providerList || []}
          type="ComboBox"
          showLabel={true}
          label="Provider ID"
          containerClassNames={["min-w-[200px]"]}
          setHasUpdate={handleHasUdpate}
        />
        {/* Generated by GetComboBoxFormControl - GetComboBoxFormControl */}
        <FormikControl
          name="providerState"
          options={CONTROL_OPTIONS.providerState}
          type="ComboBox"
          showLabel={true}
          label="Provider State"
          containerClassNames={["min-w-[200px]"]}
          setHasUpdate={handleHasUdpate}
        />
        {/* Generated by GetInputFormControl - Input Form Control */}
        <FormikControl
          name="providerOffice"
          type="Text"
          label="Provider Office"
          containerClassNames={["w-full"]}
          setHasUpdate={handleHasUdpate}
        />
        {/* Generated by GetComboBoxFormControl - GetComboBoxFormControl */}
        <FormikControl
          name="providerSource"
          options={CONTROL_OPTIONS.providerSource}
          type="ComboBox"
          showLabel={true}
          label="Provider Source"
          containerClassNames={["min-w-[200px]"]}
          setHasUpdate={handleHasUdpate}
        />
        {/* Generated by GetComboBoxFormControl - GetComboBoxFormControl */}
        <FormikControl
          name="providerType"
          options={CONTROL_OPTIONS.providerType}
          type="ComboBox"
          showLabel={true}
          label="Provider Type"
          containerClassNames={["min-w-[200px]"]}
          setHasUpdate={handleHasUdpate}
        />
        {/* Generated by GetInputFormControl - Input Form Control */}
        <FormikControl
          name="providerContactName"
          type="Text"
          label="Provider Contact Name"
          containerClassNames={["w-full"]}
          setHasUpdate={handleHasUdpate}
        />
        {/* Generated by GetInputFormControl - Input Form Control */}
        <FormikControl
          name="providerEmail"
          type="Text"
          label="Provider Email"
          containerClassNames={["w-full"]}
          setHasUpdate={handleHasUdpate}
        />
        {/* Generated by GetInputFormControl - Input Form Control */}
        <FormikControl
          name="providerContactNumber"
          type="Text"
          label="Provider Contact Number"
          containerClassNames={["w-full"]}
          setHasUpdate={handleHasUdpate}
        />
        {/* Generated by GetInputFormControl - Input Form Control */}
        <FormikControl
          name="email"
          type="Text"
          label="Email"
          containerClassNames={["w-full"]}
          setHasUpdate={handleHasUdpate}
        />
        {/* Generated by GetInputFormControl - Input Form Control */}
        <FormikControl
          name="employer"
          type="Text"
          label="Employer"
          containerClassNames={["w-full"]}
          setHasUpdate={handleHasUdpate}
        />
        {/* Generated by GetComboBoxFormControl - GetComboBoxFormControl */}
        <FormikControl
          name="employerOffice"
          options={CONTROL_OPTIONS.employerOffice}
          type="ComboBox"
          showLabel={true}
          label="Employer Office"
          containerClassNames={["min-w-[200px]"]}
          setHasUpdate={handleHasUdpate}
        />
        {/* Generated by GetComboBoxFormControl - GetComboBoxFormControl */}
        <FormikControl
          name="employerState"
          options={CONTROL_OPTIONS.employerState}
          type="ComboBox"
          showLabel={true}
          label="Employer State"
          containerClassNames={["min-w-[200px]"]}
          setHasUpdate={handleHasUdpate}
        />
        {/* Generated by GetInputFormControl - Input Form Control */}
        <FormikControl
          name="employerCandidateID"
          type="Text"
          label="Employer Candidate ID"
          containerClassNames={["w-full"]}
          setHasUpdate={handleHasUdpate}
        />
        {/* Generated by GetInputFormControl - Input Form Control */}
        <FormikControl
          name="employerCandidateOwner"
          type="Text"
          label="Employer Candidate Owner"
          containerClassNames={["w-full"]}
          setHasUpdate={handleHasUdpate}
        />
        {/* Generated by GetComboBoxFormControl - GetComboBoxFormControl */}
        <FormikControl
          name="groupSite"
          options={CONTROL_OPTIONS.groupSite}
          type="ComboBox"
          showLabel={true}
          label="Group Site"
          containerClassNames={["min-w-[200px]"]}
          setHasUpdate={handleHasUdpate}
        />
        {/* Generated by GetComboBoxFormControl - GetComboBoxFormControl */}
        <FormikControl
          name="division"
          options={CONTROL_OPTIONS.division}
          type="ComboBox"
          showLabel={true}
          label="Division"
          containerClassNames={["min-w-[200px]"]}
          setHasUpdate={handleHasUdpate}
        />
        {/* Generated by GetInputFormControl - Input Form Control */}
        <FormikControl
          name="wageSubsidyAmount"
          type="Currency"
          label="Wage Subsidy Amount"
          containerClassNames={["w-full"]}
          setHasUpdate={handleHasUdpate}
        />
        {/* Generated by GetInputFormControl - Input Form Control */}
        <FormikControl
          name="benchmarkHours"
          type="Decimal"
          label="Benchmark Hours"
          containerClassNames={["w-full"]}
          setHasUpdate={handleHasUdpate}
        />
        {/* Generated by GetInputFormControl - Input Form Control */}
        <FormikControl
          name="startDate"
          type="Date"
          label="Start Date"
          containerClassNames={["w-full"]}
          setHasUpdate={handleHasUdpate}
        />
        {/* Generated by GetComboBoxFormControl - GetComboBoxFormControl */}
        <FormikControl
          name="status"
          options={CONTROL_OPTIONS.status}
          type="ComboBox"
          showLabel={true}
          label="Status"
          containerClassNames={["min-w-[200px]"]}
          setHasUpdate={handleHasUdpate}
        />
        {/* Generated by GetComboBoxFormControl - GetComboBoxFormControl */}
        <FormikControl
          name="stage"
          options={CONTROL_OPTIONS.stage}
          type="ComboBox"
          showLabel={true}
          label="Stage"
          containerClassNames={["min-w-[200px]"]}
          setHasUpdate={handleHasUdpate}
        />
        {/* Generated by GetInputFormControl - Input Form Control */}
        <FormikControl
          name="outcomeReminder"
          type="Text"
          label="Outcome Reminder"
          containerClassNames={["w-full"]}
          setHasUpdate={handleHasUdpate}
        />
        {/* Generated by GetInputFormControl - Input Form Control */}
        <FormikControl
          name="payslipStatus"
          type="Text"
          label="Payslip Status"
          containerClassNames={["w-full"]}
          setHasUpdate={handleHasUdpate}
        />
        {/* Generated by GetComboBoxFormControl - GetComboBoxFormControl */}
        <FormikControl
          name="priority"
          options={CONTROL_OPTIONS.priority}
          type="ComboBox"
          showLabel={true}
          label="Priority"
          containerClassNames={["min-w-[200px]"]}
          setHasUpdate={handleHasUdpate}
        />
        {/* Generated by GetFilterSwitchFormControl - Filter Switch Form Control */}
        <FormikControl
          containerClassNames={["flex-row"]}
          name="placementSent"
          label="Placement Sent"
          type="Switch"
        />
        {/* Generated by GetComboBoxFormControl - GetComboBoxFormControl */}
        <FormikControl
          name="placementStatus"
          options={CONTROL_OPTIONS.placementStatus}
          type="ComboBox"
          showLabel={true}
          label="Placement Status"
          containerClassNames={["min-w-[200px]"]}
          setHasUpdate={handleHasUdpate}
        />
        {/* Generated by GetFilterSwitchFormControl - Filter Switch Form Control */}
        <FormikControl
          containerClassNames={["flex-row"]}
          name="archive"
          label="Archive"
          type="Switch"
        />
        {/* Generated by GetFilterSwitchFormControl - Filter Switch Form Control */}
        <FormikControl
          containerClassNames={["flex-row"]}
          name="invoiced"
          label="Invoiced"
          type="Switch"
        />
        {/* Generated by GetInputFormControl - Input Form Control */}
        <FormikControl
          name="invoiceNumber"
          type="Text"
          label="Invoice Number"
          containerClassNames={["w-full"]}
          setHasUpdate={handleHasUdpate}
        />
        {/* Generated by GetInputFormControl - Input Form Control */}
        <FormikControl
          name="enquiryDate"
          type="Date"
          label="Enquiry Date"
          containerClassNames={["w-full"]}
          setHasUpdate={handleHasUdpate}
        />
        {/* Generated by GetInputFormControl - Input Form Control */}
        <FormikControl
          name="enquiryType"
          type="Text"
          label="Enquiry Type"
          containerClassNames={["w-full"]}
          setHasUpdate={handleHasUdpate}
        />
        {/* Generated by GetInputFormControl - Input Form Control */}
        <FormikControl
          name="wSAgreement"
          type="FileInput"
          label="WS Agreement"
          containerClassNames={["w-full"]}
          setHasUpdate={handleHasUdpate}
        />
        {/* Generated by GetInputFormControl - Input Form Control */}
        <FormikControl
          name="wSSchedule"
          type="FileInput"
          label="WS Schedule"
          containerClassNames={["w-full"]}
          setHasUpdate={handleHasUdpate}
        />
        {/* Generated by GetInputFormControl - Input Form Control */}
        <FormikControl
          name="notes"
          type="Textarea"
          label="Notes"
          containerClassNames={["w-full"]}
          setHasUpdate={handleHasUdpate}
        />

        <div className="flex gap-2 mt-auto">
          <Button
            type="button"
            size={"sm"}
            variant={"secondary"}
            onClick={(e) => {
              formik.setFieldValue("addNew", true);
              handleSubmitClick(e);
            }}
          >
            Save & Add New
          </Button>
          <Button
            type="button"
            size={"sm"}
            variant={"secondary"}
            onClick={(e) => {
              formik.setFieldValue("addNew", false);
              handleSubmitClick(e);
            }}
          >
            Save
          </Button>
          <Button
            type="button"
            size={"sm"}
            variant={"ghost"}
            onClick={(e) => {
              router.back();
            }}
          >
            Cancel
          </Button>
          {id !== "new" && (
            <Button
              type="button"
              size={"sm"}
              variant={"destructive"}
              onClick={(e) => {
                setRecordsToDelete([formik.values[PRIMARY_KEY].toString()]);
              }}
              className={"ml-auto"}
            >
              <Trash className="w-4 h-4 mr-2" />
              Delete
            </Button>
          )}
        </div>
      </Form>
    );
  };

  useEffect(() => {
    setMounted(true);
    handleFocus();
  }, []);

  return (
    <>
      <Breadcrumb
        links={[
          { name: "Candidates", href: "/candidates" },
          { name: recordName, href: "" },
        ]}
      />
      <Formik
        initialValues={initialValues}
        onSubmit={handleFormikSubmit}
        validateOnChange={false}
        validateOnBlur={false}
        enableReinitialize={true}
        validationSchema={CandidateSchema}
      >
        {renderFormik}
      </Formik>
      <CandidateDeleteDialog
        onSuccess={() => {
          toast({
            description: "Candidate successfully deleted.",
            variant: "success",
            duration: 4000,
          });
          router.back();
        }}
      />
    </>
  );
};

export default CandidateForm;
