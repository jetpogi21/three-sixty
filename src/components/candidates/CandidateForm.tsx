//Generated by WriteToModelform_tsx - ModelForm.tsx
"use client";
import {
  CandidateFormFormikInitialValues,
  CandidateModel,
  CandidateSearchParams,
} from "@/interfaces/CandidateInterfaces";
import {
  Form,
  Formik,
  FormikHelpers,
  FormikProps,
  useFormikContext,
} from "formik";
import React, { MouseEventHandler, useEffect, useRef, useState } from "react";
import { BasicModel } from "@/interfaces/GeneralInterfaces";
import {
  DEFAULT_FORM_VALUE,
  CONTROL_OPTIONS,
  PRIMARY_KEY,
} from "@/utils/constants/CandidateConstants";
import { useURL } from "@/hooks/useURL";
import FormikControl from "@/components/form/FormikControl";
import { Button } from "@/components/ui/Button";
import Breadcrumb from "@/components/ui/Breadcrumb";
import { sortData } from "@/utils/sort";
import { useCandidateStore } from "@/hooks/candidates/useCandidateStore";
import { toast } from "@/hooks/use-toast";
import { useCandidateQuery } from "@/hooks/candidates/useCandidateQuery";
import { convertArrayItemsToStrings } from "@/utils/utils";
import { CandidateSchema } from "@/schema/CandidateSchema";
import { Trash } from "lucide-react";
import { useCandidateDeleteDialog } from "@/hooks/candidates/useCandidateDeleteDialog";
import { CandidateDeleteDialog } from "@/components/candidates/CandidateDeleteDialog";

//Generated by GetAllModelFormRequiredRightModelListImport
//Generated by GetModelFormRequiredRightModelListImport - GetModelFormRequiredRightModelListImport
import useProviderList from "@/hooks/providers/useProviderList";
//Generated by GetAllRequiredListImportForRelatedModelFromField
//Generated by GetRequiredListImportForRelatedModelFromField - GetRequiredListImportForRelatedModelFromField
import useStateList from "@/hooks/states/useStateList";
//Generated by GetRequiredListImportForRelatedModelFromField - GetRequiredListImportForRelatedModelFromField
import useProviderSourceList from "@/hooks/provider-sources/useProviderSourceList";
//Generated by GetRequiredListImportForRelatedModelFromField - GetRequiredListImportForRelatedModelFromField
import useProviderTypeList from "@/hooks/provider-types/useProviderTypeList";
//Generated by GetRequiredListImportForRelatedModelFromField - GetRequiredListImportForRelatedModelFromField
import useEmployerOfficeList from "@/hooks/employer-offices/useEmployerOfficeList";
//Generated by GetRequiredListImportForRelatedModelFromField - GetRequiredListImportForRelatedModelFromField
import useGroupSiteList from "@/hooks/group-sites/useGroupSiteList";
//Generated by GetRequiredListImportForRelatedModelFromField - GetRequiredListImportForRelatedModelFromField
import useDivisionList from "@/hooks/divisions/useDivisionList";
//Generated by GetRequiredListImportForRelatedModelFromField - GetRequiredListImportForRelatedModelFromField
import useStatusList from "@/hooks/statuses/useStatusList";
//Generated by GetRequiredListImportForRelatedModelFromField - GetRequiredListImportForRelatedModelFromField
import useStageList from "@/hooks/stages/useStageList";
//Generated by GetRequiredListImportForRelatedModelFromField - GetRequiredListImportForRelatedModelFromField
import usePriorityList from "@/hooks/priorities/usePriorityList";
//Generated by GetRequiredListImportForRelatedModelFromField - GetRequiredListImportForRelatedModelFromField
import usePlacementStatusList from "@/hooks/placement-status/usePlacementStatusList";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/Tabs";
import { Card, CardContent } from "@/components/ui/Card";

interface CandidateFormProps {
  data: CandidateModel | null;
  id: string;
}

const CandidateForm: React.FC<CandidateFormProps> = (prop) => {
  const { id } = prop;
  const { router, query, pathname } = useURL<CandidateSearchParams>();

  //Local states
  const [mounted, setMounted] = useState(false);
  const [recordName, setRecordName] = useState(
    prop.data ? prop.data.id.toString() : "New Candidate"
  );

  const ref = useRef<any>(null);

  //Zustand variables
  const { isUpdating, setIsUpdating, hasUpdate, setHasUpdate } =
    useCandidateStore((state) => ({
      isUpdating: state.isUpdating,
      setIsUpdating: state.setIsUpdating,
      hasUpdate: state.hasUpdate,
      setHasUpdate: state.setHasUpdate,
    }));

  const { setRecordsToDelete } = useCandidateDeleteDialog((state) => ({
    setRecordsToDelete: state.setRecordsToDelete,
  }));

  //Tanstack queries

  //Generated by GetAllRelatedRightModelListFromRelatedModel
  //Generated by GetRelatedRightModelListFromRelatedModel - GetRelatedRightModelListFromRelatedModel
  const providerPlaceholder: BasicModel[] = [];
  if (prop.data) {
    //Generated by GetAllRightModelPushPlaceholder
    //Generated by GetRightModelPushPlaceholder - GetRightModelPushPlaceholder
    prop.data.providerID &&
      !providerPlaceholder.some((item) => item.id === prop.data?.providerID) &&
      providerPlaceholder.push({
        id: prop.data.providerID,
        name: prop.data.Provider.name,
      });
  }
  const { data: providerList } = useProviderList({
    placeholderData: providerPlaceholder,
  });

  //Generated by GetAllRelatedModelListFromField
  //Generated by GetRelatedModelListFromField - GetRelatedModelListFromField
  const statePlaceholder: BasicModel[] = [];
  if (prop.data) {
    //Generated by GetAllPlaceholderModelFromField
    //Generated by GetPlaceholderModelFromField - GetPlaceholderModelFromField
    prop.data.candidateState &&
      !statePlaceholder.some((item) => item.id === prop.data?.candidateState) &&
      statePlaceholder.push({
        id: prop.data.candidateState,
        name: prop.data.candidateState.toString(),
      });
    //Generated by GetPlaceholderModelFromField - GetPlaceholderModelFromField
    prop.data.providerState &&
      !statePlaceholder.some((item) => item.id === prop.data?.providerState) &&
      statePlaceholder.push({
        id: prop.data.providerState,
        name: prop.data.providerState.toString(),
      });
    //Generated by GetPlaceholderModelFromField - GetPlaceholderModelFromField
    prop.data.employerState &&
      !statePlaceholder.some((item) => item.id === prop.data?.employerState) &&
      statePlaceholder.push({
        id: prop.data.employerState,
        name: prop.data.employerState.toString(),
      });
  }

  const { data: stateList } = useStateList({
    placeholderData: statePlaceholder,
    useName: true,
  });
  //Generated by GetRelatedModelListFromField - GetRelatedModelListFromField
  const providerSourcePlaceholder: BasicModel[] = [];
  if (prop.data) {
    //Generated by GetAllPlaceholderModelFromField
    //Generated by GetPlaceholderModelFromField - GetPlaceholderModelFromField
    prop.data.providerSource &&
      !providerSourcePlaceholder.some(
        (item) => item.id === prop.data?.providerSource
      ) &&
      providerSourcePlaceholder.push({
        id: prop.data.providerSource,
        name: prop.data.providerSource.toString(),
      });
  }

  const { data: providerSourceList } = useProviderSourceList({
    placeholderData: providerSourcePlaceholder,
    useName: true,
  });
  //Generated by GetRelatedModelListFromField - GetRelatedModelListFromField
  const providerTypePlaceholder: BasicModel[] = [];
  if (prop.data) {
    //Generated by GetAllPlaceholderModelFromField
    //Generated by GetPlaceholderModelFromField - GetPlaceholderModelFromField
    prop.data.providerType &&
      !providerTypePlaceholder.some(
        (item) => item.id === prop.data?.providerType
      ) &&
      providerTypePlaceholder.push({
        id: prop.data.providerType,
        name: prop.data.providerType.toString(),
      });
  }

  const { data: providerTypeList } = useProviderTypeList({
    placeholderData: providerTypePlaceholder,
    useName: true,
  });
  //Generated by GetRelatedModelListFromField - GetRelatedModelListFromField
  const employerOfficePlaceholder: BasicModel[] = [];
  if (prop.data) {
    //Generated by GetAllPlaceholderModelFromField
    //Generated by GetPlaceholderModelFromField - GetPlaceholderModelFromField
    prop.data.employerOffice &&
      !employerOfficePlaceholder.some(
        (item) => item.id === prop.data?.employerOffice
      ) &&
      employerOfficePlaceholder.push({
        id: prop.data.employerOffice,
        name: prop.data.employerOffice.toString(),
      });
  }

  const { data: employerOfficeList } = useEmployerOfficeList({
    placeholderData: employerOfficePlaceholder,
    useName: true,
  });
  //Generated by GetRelatedModelListFromField - GetRelatedModelListFromField
  const groupSitePlaceholder: BasicModel[] = [];
  if (prop.data) {
    //Generated by GetAllPlaceholderModelFromField
    //Generated by GetPlaceholderModelFromField - GetPlaceholderModelFromField
    prop.data.groupSite &&
      !groupSitePlaceholder.some((item) => item.id === prop.data?.groupSite) &&
      groupSitePlaceholder.push({
        id: prop.data.groupSite,
        name: prop.data.groupSite.toString(),
      });
  }

  const { data: groupSiteList } = useGroupSiteList({
    placeholderData: groupSitePlaceholder,
    useName: true,
  });
  //Generated by GetRelatedModelListFromField - GetRelatedModelListFromField
  const divisionPlaceholder: BasicModel[] = [];
  if (prop.data) {
    //Generated by GetAllPlaceholderModelFromField
    //Generated by GetPlaceholderModelFromField - GetPlaceholderModelFromField
    prop.data.division &&
      !divisionPlaceholder.some((item) => item.id === prop.data?.division) &&
      divisionPlaceholder.push({
        id: prop.data.division,
        name: prop.data.division.toString(),
      });
  }

  const { data: divisionList } = useDivisionList({
    placeholderData: divisionPlaceholder,
    useName: true,
  });
  //Generated by GetRelatedModelListFromField - GetRelatedModelListFromField
  const statusPlaceholder: BasicModel[] = [];
  if (prop.data) {
    //Generated by GetAllPlaceholderModelFromField
    //Generated by GetPlaceholderModelFromField - GetPlaceholderModelFromField
    prop.data.status &&
      !statusPlaceholder.some((item) => item.id === prop.data?.status) &&
      statusPlaceholder.push({
        id: prop.data.status,
        name: prop.data.status.toString(),
      });
  }

  const { data: statusList } = useStatusList({
    placeholderData: statusPlaceholder,
    useName: true,
  });
  //Generated by GetRelatedModelListFromField - GetRelatedModelListFromField
  const stagePlaceholder: BasicModel[] = [];
  if (prop.data) {
    //Generated by GetAllPlaceholderModelFromField
    //Generated by GetPlaceholderModelFromField - GetPlaceholderModelFromField
    prop.data.stage &&
      !stagePlaceholder.some((item) => item.id === prop.data?.stage) &&
      stagePlaceholder.push({
        id: prop.data.stage,
        name: prop.data.stage.toString(),
      });
  }

  const { data: stageList } = useStageList({
    placeholderData: stagePlaceholder,
    useName: true,
  });
  //Generated by GetRelatedModelListFromField - GetRelatedModelListFromField
  const priorityPlaceholder: BasicModel[] = [];
  if (prop.data) {
    //Generated by GetAllPlaceholderModelFromField
    //Generated by GetPlaceholderModelFromField - GetPlaceholderModelFromField
    prop.data.priority &&
      !priorityPlaceholder.some((item) => item.id === prop.data?.priority) &&
      priorityPlaceholder.push({
        id: prop.data.priority,
        name: prop.data.priority.toString(),
      });
  }

  const { data: priorityList } = usePriorityList({
    placeholderData: priorityPlaceholder,
    useName: true,
  });
  //Generated by GetRelatedModelListFromField - GetRelatedModelListFromField
  const placementStatusPlaceholder: BasicModel[] = [];
  if (prop.data) {
    //Generated by GetAllPlaceholderModelFromField
    //Generated by GetPlaceholderModelFromField - GetPlaceholderModelFromField
    prop.data.placementStatus &&
      !placementStatusPlaceholder.some(
        (item) => item.id === prop.data?.placementStatus
      ) &&
      placementStatusPlaceholder.push({
        id: prop.data.placementStatus,
        name: prop.data.placementStatus.toString(),
      });
  }

  const { data: placementStatusList } = usePlacementStatusList({
    placeholderData: placementStatusPlaceholder,
    useName: true,
  });

  const { candidateMutation, candidateQuery } = useCandidateQuery(id, {
    enabled: mounted && id !== "new",
    initialData: prop.data,
  });

  const candidate = candidateQuery.data;

  const initialValues: CandidateFormFormikInitialValues = {
    ...DEFAULT_FORM_VALUE,
    //Generated by GetAllRightModelDefaultList
    //Generated by GetRightModelDefaultList - GetRightModelDefaultList
    providerID:
      providerList && providerList.length > 0 ? providerList[0].id : "",
  };

  if (candidate) {
    for (const key in initialValues) {
      if (candidate.hasOwnProperty(key) && initialValues.hasOwnProperty(key)) {
        //@ts-ignore
        //prettier-ignore
        initialValues[key] = candidate[key] === null ? "" : candidate[key];
      }
    }
  }

  const handleFocus = () => {
    ref && ref.current && ref.current.focus();
  };

  const handleHasUdpate = () => {
    setHasUpdate(true);
  };

  const handleFormikSubmit = (
    values: CandidateFormFormikInitialValues,
    formik: FormikHelpers<CandidateFormFormikInitialValues>
  ) => {
    //@ts-ignore
    const addNew: boolean = values.addNew;

    const goToNewRecord = () => {
      formik.setValues({
        ...DEFAULT_FORM_VALUE,
      });
      window.history.pushState(
        {},
        "",
        `${window.location.origin}/candidates/new`
      );
      setRecordName("New Candidate");

      handleFocus();
    };

    if (hasUpdate) {
      const payload = {
        ...values,
      };

      candidateMutation
        .mutateAsync(payload)
        .then((data) => {
          if (addNew) {
            goToNewRecord();
          } else {
            if (data.id) {
              formik.setFieldValue("id", data.id);
            }

            if (data.id) {
              window.history.pushState(
                {},
                "",
                `${window.location.origin}/candidates/${data.id}`
              );
            }

            setRecordName(data.id ? data.id.toString() : values.id.toString());
          }

          toast({
            description: "Candidate list updated successfully",
            variant: "success",
            duration: 2000,
          });
        })
        .catch((err) => console.log(err));
    } else {
      if (addNew) {
        goToNewRecord();
      }
    }
  };

  const renderFormik = (
    formik: FormikProps<CandidateFormFormikInitialValues>
  ) => {
    const handleSubmitClick: MouseEventHandler = (e) => {
      e.preventDefault();
      formik.submitForm();
    };

    return (
      <Form
        className="flex flex-col flex-1 h-full gap-4"
        autoComplete="off"
      >
        <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 md:grid-cols-4">
          {/* Generated by GetInputFormControl - Input Form Control */}
          <FormikControl
            name="candidateName"
            type="Text"
            label="Candidate Name"
            containerClassNames={["w-full"]}
            ref={ref}
            setFocusOnLoad={true}
            setHasUpdate={handleHasUdpate}
          />
          {/* Generated by GetComboBoxFormControl - GetComboBoxFormControl */}
          <FormikControl
            name="source"
            options={CONTROL_OPTIONS.source}
            type="ComboBox"
            showLabel={true}
            label="Source"
            containerClassNames={["min-w-[200px]"]}
            setHasUpdate={handleHasUdpate}
          />
          {/* Generated by GetComboBoxFormControl - GetComboBoxFormControl */}
          <FormikControl
            name="candidateState"
            options={stateList || []}
            type="ComboBox"
            showLabel={true}
            label="Candidate State"
            containerClassNames={["min-w-[200px]"]}
            setHasUpdate={handleHasUdpate}
          />
          {/* Generated by GetInputFormControl - Input Form Control */}
          <FormikControl
            name="email"
            type="Text"
            label="Email"
            containerClassNames={["w-full"]}
            setHasUpdate={handleHasUdpate}
          />
          {/* Generated by GetInputFormControl - Input Form Control */}
          <FormikControl
            name="wageSubsidyAmount"
            type="Currency"
            label="Wage Subsidy Amount"
            containerClassNames={["w-full"]}
            currency="$"
            setHasUpdate={handleHasUdpate}
          />
          {/* Generated by GetInputFormControl - Input Form Control */}
          <FormikControl
            name="benchmarkHours"
            type="Decimal"
            label="Benchmark Hours"
            containerClassNames={["w-full"]}
            setHasUpdate={handleHasUdpate}
          />
          {/* Generated by GetInputFormControl - Input Form Control */}
          <FormikControl
            name="startDate"
            type="Date"
            label="Start Date"
            containerClassNames={["w-full"]}
            setHasUpdate={handleHasUdpate}
          />
          {/* Generated by GetComboBoxFormControl - GetComboBoxFormControl */}
          <FormikControl
            name="status"
            options={statusList || []}
            type="ComboBox"
            showLabel={true}
            label="Status"
            containerClassNames={["min-w-[200px]"]}
            setHasUpdate={handleHasUdpate}
          />
          {/* Generated by GetComboBoxFormControl - GetComboBoxFormControl */}
          <FormikControl
            name="stage"
            options={stageList || []}
            type="ComboBox"
            showLabel={true}
            label="Stage"
            containerClassNames={["min-w-[200px]"]}
            setHasUpdate={handleHasUdpate}
          />
          <div className="md:col-span-3"></div>
          {/* Generated by GetInputFormControl - Input Form Control */}
          <FormikControl
            name="notes"
            type="Textarea"
            label="Notes"
            containerClassNames={["md:col-span-4"]}
            setHasUpdate={handleHasUdpate}
          />
        </div>

        <Tabs
          defaultValue="provider"
          className="w-full"
        >
          {/* Generated by GetAllFormikControls */}
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="provider">Provider</TabsTrigger>
            <TabsTrigger value="employer">Employer</TabsTrigger>
            <TabsTrigger value="files">Files</TabsTrigger>
            <TabsTrigger value="others">Other Info</TabsTrigger>
          </TabsList>
          <TabsContent value="provider">
            <Card className="mt-4">
              <CardContent className="grid grid-cols-4 gap-4 p-6">
                {/* Generated by GetComboBoxFormControl - GetComboBoxFormControl */}
                <FormikControl
                  name="providerID"
                  options={providerList || []}
                  type="ComboBox"
                  showLabel={true}
                  label="Provider ID"
                  containerClassNames={["min-w-[200px]"]}
                  setHasUpdate={handleHasUdpate}
                />
                {/* Generated by GetComboBoxFormControl - GetComboBoxFormControl */}
                <FormikControl
                  name="providerState"
                  options={stateList || []}
                  type="ComboBox"
                  showLabel={true}
                  label="Provider State"
                  containerClassNames={["min-w-[200px]"]}
                  setHasUpdate={handleHasUdpate}
                />
                {/* Generated by GetInputFormControl - Input Form Control */}
                <FormikControl
                  name="providerOffice"
                  type="Text"
                  label="Provider Office"
                  containerClassNames={["w-full"]}
                  setHasUpdate={handleHasUdpate}
                />
                {/* Generated by GetComboBoxFormControl - GetComboBoxFormControl */}
                <FormikControl
                  name="providerSource"
                  options={providerSourceList || []}
                  type="ComboBox"
                  showLabel={true}
                  label="Provider Source"
                  containerClassNames={["min-w-[200px]"]}
                  setHasUpdate={handleHasUdpate}
                />
                {/* Generated by GetComboBoxFormControl - GetComboBoxFormControl */}
                <FormikControl
                  name="providerType"
                  options={providerTypeList || []}
                  type="ComboBox"
                  showLabel={true}
                  label="Provider Type"
                  containerClassNames={["min-w-[200px]"]}
                  setHasUpdate={handleHasUdpate}
                />
                {/* Generated by GetInputFormControl - Input Form Control */}
                <FormikControl
                  name="providerContactName"
                  type="Text"
                  label="Provider Contact Name"
                  containerClassNames={["w-full"]}
                  setHasUpdate={handleHasUdpate}
                />
                {/* Generated by GetInputFormControl - Input Form Control */}
                <FormikControl
                  name="providerEmail"
                  type="Text"
                  label="Provider Email"
                  containerClassNames={["w-full"]}
                  setHasUpdate={handleHasUdpate}
                />
                {/* Generated by GetInputFormControl - Input Form Control */}
                <FormikControl
                  name="providerContactNumber"
                  type="Text"
                  label="Provider Contact Number"
                  containerClassNames={["w-full"]}
                  setHasUpdate={handleHasUdpate}
                />
              </CardContent>
            </Card>
          </TabsContent>
          <TabsContent value="employer">
            <Card className="mt-4">
              <CardContent className="grid grid-cols-4 gap-4 p-6">
                {/* Generated by GetInputFormControl - Input Form Control */}
                <FormikControl
                  name="employer"
                  type="Text"
                  label="Employer"
                  containerClassNames={["w-full"]}
                  setHasUpdate={handleHasUdpate}
                />
                {/* Generated by GetComboBoxFormControl - GetComboBoxFormControl */}
                <FormikControl
                  name="employerOffice"
                  options={employerOfficeList || []}
                  type="ComboBox"
                  showLabel={true}
                  label="Employer Office"
                  containerClassNames={["min-w-[200px]"]}
                  setHasUpdate={handleHasUdpate}
                />
                {/* Generated by GetComboBoxFormControl - GetComboBoxFormControl */}
                <FormikControl
                  name="employerState"
                  options={stateList || []}
                  type="ComboBox"
                  showLabel={true}
                  label="Employer State"
                  containerClassNames={["min-w-[200px]"]}
                  setHasUpdate={handleHasUdpate}
                />
                {/* Generated by GetInputFormControl - Input Form Control */}
                <FormikControl
                  name="employerCandidateID"
                  type="Text"
                  label="Employer Candidate ID"
                  containerClassNames={["w-full"]}
                  setHasUpdate={handleHasUdpate}
                />
                {/* Generated by GetInputFormControl - Input Form Control */}
                <FormikControl
                  name="employerCandidateOwner"
                  type="Text"
                  label="Employer Candidate Owner"
                  containerClassNames={["w-full"]}
                  setHasUpdate={handleHasUdpate}
                />
                {/* Generated by GetComboBoxFormControl - GetComboBoxFormControl */}
                <FormikControl
                  name="groupSite"
                  options={groupSiteList || []}
                  type="ComboBox"
                  showLabel={true}
                  label="Group Site"
                  containerClassNames={["min-w-[200px]"]}
                  setHasUpdate={handleHasUdpate}
                />
                {/* Generated by GetComboBoxFormControl - GetComboBoxFormControl */}
                <FormikControl
                  name="division"
                  options={divisionList || []}
                  type="ComboBox"
                  showLabel={true}
                  label="Division"
                  containerClassNames={["min-w-[200px]"]}
                  setHasUpdate={handleHasUdpate}
                />
              </CardContent>
            </Card>
          </TabsContent>
          <TabsContent value="files">
            <Card className="mt-4">
              <CardContent className="grid grid-cols-2 gap-4 p-6">
                {/* Generated by GetInputFormControl - Input Form Control */}
                <FormikControl
                  name="wSAgreement"
                  type="FileInput"
                  label="WS Agreement"
                  containerClassNames={["w-full"]}
                  setHasUpdate={handleHasUdpate}
                />
                {/* Generated by GetInputFormControl - Input Form Control */}
                <FormikControl
                  name="wSSchedule"
                  type="FileInput"
                  label="WS Schedule"
                  containerClassNames={["w-full"]}
                  setHasUpdate={handleHasUdpate}
                />
              </CardContent>
            </Card>
          </TabsContent>
          <TabsContent value="others">
            <Card className="mt-4">
              <CardContent className="flex gap-4 p-6">
                <div className="grid flex-1 grid-cols-3 gap-4">
                  {/* Generated by GetInputFormControl - Input Form Control */}
                  <FormikControl
                    name="outcomeReminder"
                    type="Text"
                    label="Outcome Reminder"
                    containerClassNames={["w-full"]}
                    setHasUpdate={handleHasUdpate}
                  />
                  {/* Generated by GetInputFormControl - Input Form Control */}
                  <FormikControl
                    name="payslipStatus"
                    type="Text"
                    label="Payslip Status"
                    containerClassNames={["w-full"]}
                    setHasUpdate={handleHasUdpate}
                  />
                  {/* Generated by GetComboBoxFormControl - GetComboBoxFormControl */}
                  <FormikControl
                    name="priority"
                    options={priorityList || []}
                    type="ComboBox"
                    showLabel={true}
                    label="Priority"
                    containerClassNames={["min-w-[200px]"]}
                    setHasUpdate={handleHasUdpate}
                  />
                  {/* Generated by GetComboBoxFormControl - GetComboBoxFormControl */}
                  <FormikControl
                    name="placementStatus"
                    options={placementStatusList || []}
                    type="ComboBox"
                    showLabel={true}
                    label="Placement Status"
                    containerClassNames={["min-w-[200px]"]}
                    setHasUpdate={handleHasUdpate}
                  />
                  {/* Generated by GetInputFormControl - Input Form Control */}
                  <FormikControl
                    name="invoiceNumber"
                    type="Text"
                    label="Invoice Number"
                    containerClassNames={["w-full"]}
                    setHasUpdate={handleHasUdpate}
                  />
                  {/* Generated by GetInputFormControl - Input Form Control */}
                  <FormikControl
                    name="enquiryDate"
                    type="Date"
                    label="Enquiry Date"
                    containerClassNames={["w-full"]}
                    setHasUpdate={handleHasUdpate}
                  />
                  {/* Generated by GetInputFormControl - Input Form Control */}
                  <FormikControl
                    name="enquiryType"
                    type="Text"
                    label="Enquiry Type"
                    containerClassNames={["w-full"]}
                    setHasUpdate={handleHasUdpate}
                  />
                </div>
                <div className="flex flex-col self-center gap-4">
                  {/* Generated by GetFilterSwitchFormControl - Filter Switch Form Control */}
                  <FormikControl
                    containerClassNames={["flex-row"]}
                    name="placementSent"
                    label="Placement Sent"
                    type="Switch"
                    size={"sm"}
                  />

                  {/* Generated by GetFilterSwitchFormControl - Filter Switch Form Control */}
                  <FormikControl
                    containerClassNames={["flex-row"]}
                    name="archive"
                    label="Archive"
                    type="Switch"
                    size={"sm"}
                  />
                  {/* Generated by GetFilterSwitchFormControl - Filter Switch Form Control */}
                  <FormikControl
                    containerClassNames={["flex-row"]}
                    name="invoiced"
                    label="Invoiced"
                    type="Switch"
                    size={"sm"}
                  />
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>

        <div className="flex gap-2 mt-auto">
          <Button
            type="button"
            size={"sm"}
            variant={"secondary"}
            onClick={(e) => {
              formik.setFieldValue("addNew", true);
              handleSubmitClick(e);
            }}
          >
            Save & Add New
          </Button>
          <Button
            type="button"
            size={"sm"}
            variant={"secondary"}
            onClick={(e) => {
              formik.setFieldValue("addNew", false);
              handleSubmitClick(e);
            }}
          >
            Save
          </Button>
          <Button
            type="button"
            size={"sm"}
            variant={"ghost"}
            onClick={(e) => {
              router.back();
            }}
          >
            Cancel
          </Button>
          {id !== "new" && (
            <Button
              type="button"
              size={"sm"}
              variant={"destructive"}
              onClick={(e) => {
                setRecordsToDelete([formik.values[PRIMARY_KEY].toString()]);
              }}
              className={"ml-auto"}
            >
              <Trash className="w-4 h-4 mr-2" />
              Delete
            </Button>
          )}
        </div>
      </Form>
    );
  };

  useEffect(() => {
    setMounted(true);
    handleFocus();
  }, []);

  return (
    <>
      <Breadcrumb
        links={[
          { name: "Candidates", href: "/candidates" },
          { name: recordName, href: "" },
        ]}
      />
      <Formik
        initialValues={initialValues}
        onSubmit={handleFormikSubmit}
        validateOnChange={false}
        validateOnBlur={false}
        enableReinitialize={true}
        validationSchema={CandidateSchema}
      >
        {renderFormik}
      </Formik>
      <CandidateDeleteDialog
        onSuccess={() => {
          toast({
            description: "Candidate successfully deleted.",
            variant: "success",
            duration: 4000,
          });
          router.back();
        }}
      />
    </>
  );
};

export default CandidateForm;
