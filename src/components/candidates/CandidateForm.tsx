//Generated by WriteToModelform_tsx - ModelForm.tsx
"use client";
import {
  CandidateFormFormikInitialValues,
  CandidateModel,
  CandidateSearchParams,
} from "@/interfaces/CandidateInterfaces";
import { Form, Formik, FormikHelpers, FormikProps, useFormikContext, } from "formik";
import React, { MouseEventHandler, useEffect, useRef, useState } from "react";
import { DEFAULT_FORM_VALUE, CONTROL_OPTIONS, PRIMARY_KEY,
 } from "@/utils/constants/CandidateConstants";
import { useURL } from "@/hooks/useURL";
import FormikControl from "@/components/form/FormikControl";
import { Button } from "@/components/ui/Button";
import Breadcrumb from "@/components/ui/Breadcrumb";
import { sortData } from "@/utils/sort";
import { useCandidateStore } from "@/hooks/candidates/useCandidateStore";
import { toast } from "@/hooks/use-toast";
import { useCandidateQuery } from "@/hooks/candidates/useCandidateQuery";
import { convertArrayItemsToStrings } from "@/utils/utils";
import { CandidateSchema } from "@/schema/CandidateSchema";
import { Trash } from "lucide-react";
import { useCandidateDeleteDialog } from "@/hooks/candidates/useCandidateDeleteDialog";
import { CandidateDeleteDialog } from "@/components/candidates/CandidateDeleteDialog";


//Generated by GetAllModelFormRequiredRightModelListImport
//Generated by GetModelFormRequiredRightModelListImport - GetModelFormRequiredRightModelListImport
import useStateList from "@/hooks/states/useStateList";
//Generated by GetModelFormRequiredRightModelListImport - GetModelFormRequiredRightModelListImport
import useProviderList from "@/hooks/providers/useProviderList";
//Generated by GetModelFormRequiredRightModelListImport - GetModelFormRequiredRightModelListImport
import useProviderSourceList from "@/hooks/provider-sources/useProviderSourceList";
//Generated by GetModelFormRequiredRightModelListImport - GetModelFormRequiredRightModelListImport
import useProviderTypeList from "@/hooks/provider-types/useProviderTypeList";
//Generated by GetModelFormRequiredRightModelListImport - GetModelFormRequiredRightModelListImport
import useEmployerOfficeList from "@/hooks/employer-offices/useEmployerOfficeList";
//Generated by GetModelFormRequiredRightModelListImport - GetModelFormRequiredRightModelListImport
import useGroupSiteList from "@/hooks/group-sites/useGroupSiteList";
//Generated by GetModelFormRequiredRightModelListImport - GetModelFormRequiredRightModelListImport
import useDivisionList from "@/hooks/divisions/useDivisionList";
//Generated by GetModelFormRequiredRightModelListImport - GetModelFormRequiredRightModelListImport
import useStageList from "@/hooks/stages/useStageList";
//Generated by GetModelFormRequiredRightModelListImport - GetModelFormRequiredRightModelListImport
import usePriorityList from "@/hooks/priorities/usePriorityList";
//Generated by GetModelFormRequiredRightModelListImport - GetModelFormRequiredRightModelListImport
import usePlacementStatusList from "@/hooks/placement-status/usePlacementStatusList";


interface CandidateFormProps {
  data: CandidateModel | null;
  id: string;
}

const CandidateForm: React.FC<CandidateFormProps> = (prop) => {
  const { id } = prop;
  const { router, query, pathname } = useURL<CandidateSearchParams>();

  //Local states
  const [mounted, setMounted] = useState(false);
  const [recordName, setRecordName] = useState(
    prop.data ? prop.data.id.toString() : "New Candidate"
  );
  
  const ref = useRef<any>(null);

  //Zustand variables
  const { isUpdating, setIsUpdating, hasUpdate, setHasUpdate } = useCandidateStore((state) => ({
    isUpdating: state.isUpdating,
    setIsUpdating: state.setIsUpdating,
    hasUpdate: state.hasUpdate,
    setHasUpdate: state.setHasUpdate,
  }));

  const { setRecordsToDelete } = useCandidateDeleteDialog((state) => ({
    setRecordsToDelete: state.setRecordsToDelete,
  }));

  

  //Tanstack queries
  
  //Generated by GetAllRelatedRightModelListFromRelatedModel
//Generated by GetRelatedRightModelListFromRelatedModel - GetRelatedRightModelListFromRelatedModel
const { data: stateList } = useStateList({
    placeholderData: prop.data
      ? [
          {
            id: prop.data.candidateStateID,
            name: prop.data.State.name,
          },
        ]
      : [],
  });
//Generated by GetRelatedRightModelListFromRelatedModel - GetRelatedRightModelListFromRelatedModel
const { data: providerList } = useProviderList({
    placeholderData: prop.data
      ? [
          {
            id: prop.data.providerID,
            name: prop.data.Provider.name,
          },
        ]
      : [],
  });
//Generated by GetRelatedRightModelListFromRelatedModel - GetRelatedRightModelListFromRelatedModel
const { data: providerSourceList } = useProviderSourceList({
    placeholderData: prop.data
      ? [
          {
            id: prop.data.providerSourceID,
            name: prop.data.ProviderSource.name,
          },
        ]
      : [],
  });
//Generated by GetRelatedRightModelListFromRelatedModel - GetRelatedRightModelListFromRelatedModel
const { data: providerTypeList } = useProviderTypeList({
    placeholderData: prop.data
      ? [
          {
            id: prop.data.providerTypeID,
            name: prop.data.ProviderType.name,
          },
        ]
      : [],
  });
//Generated by GetRelatedRightModelListFromRelatedModel - GetRelatedRightModelListFromRelatedModel
const { data: employerOfficeList } = useEmployerOfficeList({
    placeholderData: prop.data
      ? [
          {
            id: prop.data.employerOfficeID,
            name: prop.data.EmployerOffice.name,
          },
        ]
      : [],
  });
//Generated by GetRelatedRightModelListFromRelatedModel - GetRelatedRightModelListFromRelatedModel
const { data: groupSiteList } = useGroupSiteList({
    placeholderData: prop.data
      ? [
          {
            id: prop.data.groupSiteID,
            name: prop.data.GroupSite.name,
          },
        ]
      : [],
  });
//Generated by GetRelatedRightModelListFromRelatedModel - GetRelatedRightModelListFromRelatedModel
const { data: divisionList } = useDivisionList({
    placeholderData: prop.data
      ? [
          {
            id: prop.data.divisionID,
            name: prop.data.Division.name,
          },
        ]
      : [],
  });
//Generated by GetRelatedRightModelListFromRelatedModel - GetRelatedRightModelListFromRelatedModel
const { data: stageList } = useStageList({
    placeholderData: prop.data
      ? [
          {
            id: prop.data.stageID,
            name: prop.data.Stage.name,
          },
        ]
      : [],
  });
//Generated by GetRelatedRightModelListFromRelatedModel - GetRelatedRightModelListFromRelatedModel
const { data: priorityList } = usePriorityList({
    placeholderData: prop.data
      ? [
          {
            id: prop.data.priorityID,
            name: prop.data.Priority.name,
          },
        ]
      : [],
  });
//Generated by GetRelatedRightModelListFromRelatedModel - GetRelatedRightModelListFromRelatedModel
const { data: placementStatusList } = usePlacementStatusList({
    placeholderData: prop.data
      ? [
          {
            id: prop.data.placementStatusID,
            name: prop.data.PlacementStatus.name,
          },
        ]
      : [],
  });
  

  const { candidateMutation, candidateQuery } = useCandidateQuery(id, {
    enabled: mounted && id !== "new",
    initialData: prop.data,
  });

  const candidate = candidateQuery.data;
  

  const initialValues: CandidateFormFormikInitialValues = {
    ...DEFAULT_FORM_VALUE,
    //Generated by GetAllRightModelDefaultList
//Generated by GetRightModelDefaultList - GetRightModelDefaultList
candidateStateID: stateList && stateList.length > 0 ? stateList[0].id : "",
//Generated by GetRightModelDefaultList - GetRightModelDefaultList
providerID: providerList && providerList.length > 0 ? providerList[0].id : "",
//Generated by GetRightModelDefaultList - GetRightModelDefaultList
providerSourceID: providerSourceList && providerSourceList.length > 0 ? providerSourceList[0].id : "",
//Generated by GetRightModelDefaultList - GetRightModelDefaultList
providerTypeID: providerTypeList && providerTypeList.length > 0 ? providerTypeList[0].id : "",
//Generated by GetRightModelDefaultList - GetRightModelDefaultList
employerOfficeID: employerOfficeList && employerOfficeList.length > 0 ? employerOfficeList[0].id : "",
//Generated by GetRightModelDefaultList - GetRightModelDefaultList
groupSiteID: groupSiteList && groupSiteList.length > 0 ? groupSiteList[0].id : "",
//Generated by GetRightModelDefaultList - GetRightModelDefaultList
divisionID: divisionList && divisionList.length > 0 ? divisionList[0].id : "",
//Generated by GetRightModelDefaultList - GetRightModelDefaultList
stageID: stageList && stageList.length > 0 ? stageList[0].id : "",
//Generated by GetRightModelDefaultList - GetRightModelDefaultList
priorityID: priorityList && priorityList.length > 0 ? priorityList[0].id : "",
//Generated by GetRightModelDefaultList - GetRightModelDefaultList
placementStatusID: placementStatusList && placementStatusList.length > 0 ? placementStatusList[0].id : "",
    
    
    
  };

  if (candidate) {
    for (const key in initialValues) {
      if (candidate.hasOwnProperty(key) && initialValues.hasOwnProperty(key)) {
        //@ts-ignore
        //prettier-ignore
        initialValues[key] = candidate[key] === null ? "" : candidate[key];
      }
    }

    
    
    

    
  }

  

  const handleFocus = () => {
    ref && ref.current.focus();
  };

  const handleHasUdpate = () => {
    setHasUpdate(true);
  };

  const handleFormikSubmit = (
    values: CandidateFormFormikInitialValues,
    formik: FormikHelpers<CandidateFormFormikInitialValues>
  ) => {
    //@ts-ignore
    const addNew: boolean = values.addNew;

    const goToNewRecord = () => {
      formik.setValues({
        ...DEFAULT_FORM_VALUE,
        
        
        
      });
      window.history.pushState(
        {},
        "",
        `${window.location.origin}/candidates/new`
      );
      setRecordName("New Candidate");

      handleFocus();
    };
    
    
    
    if (hasUpdate){
      const payload = {
        ...values,
        
        
      };

      candidateMutation.mutateAsync(payload).then((data) => {
      if (addNew) {
        goToNewRecord()
      } else {
        if (data.id) {
          formik.setFieldValue("id", data.id);
        }

        if (data.id) {
          window.history.pushState(
            {},
            "",
            `${window.location.origin}/candidates/${data.id}`
          );
        }

        setRecordName(data.id ? data.id.toString() : values.id.toString());
  
        

        

      }

      toast({
        description: "Candidate list updated successfully",
        variant: "success",
        duration: 2000,
      });
    }).catch((err) => console.log(err));

    } else {
      if (addNew) {
        goToNewRecord();
      }
    }
    
    
  };

  const renderFormik = (formik: FormikProps<CandidateFormFormikInitialValues>) => {
    const handleSubmitClick: MouseEventHandler = (e) => {
      e.preventDefault();
      formik.submitForm();
    };

    return (
      <Form
        className="flex flex-col flex-1 h-full gap-4"
        autoComplete="off"
      >
        {/* Generated by GetAllFormikControls */}
{/* Generated by GetInputFormControl - Input Form Control */}
<FormikControl
          name="candidateName"
          type="Text"
          label="Candidate Name"
          containerClassNames={["w-full"]}
          ref={ref}
setFocusOnLoad={true}
          setHasUpdate={handleHasUdpate}
        />
{/* Generated by GetInputFormControl - Input Form Control */}
<FormikControl
          name="source"
          type="Text"
          label="Source"
          containerClassNames={["w-full"]}
          
          setHasUpdate={handleHasUdpate}
        />
{/* Generated by GetComboBoxFormControl - GetComboBoxFormControl */}
<FormikControl
          name="candidateStateID"
          options={stateList || []}
          type="ComboBox"
          showLabel={true}
          label="Candidate State"
          containerClassNames={["min-w-[200px]"]}
          setHasUpdate={handleHasUdpate}
        />
{/* Generated by GetComboBoxFormControl - GetComboBoxFormControl */}
<FormikControl
          name="providerID"
          options={providerList || []}
          type="ComboBox"
          showLabel={true}
          label="Provider"
          containerClassNames={["min-w-[200px]"]}
          setHasUpdate={handleHasUdpate}
        />
{/* Generated by GetComboBoxFormControl - GetComboBoxFormControl */}
<FormikControl
          name="providerStateID"
          options={CONTROL_OPTIONS.providerStateID}
          type="ComboBox"
          showLabel={true}
          label="Provider State"
          containerClassNames={["min-w-[200px]"]}
          setHasUpdate={handleHasUdpate}
        />
{/* Generated by GetInputFormControl - Input Form Control */}
<FormikControl
          name="providerOffice"
          type="Text"
          label="Provider Office"
          containerClassNames={["w-full"]}
          
          setHasUpdate={handleHasUdpate}
        />
{/* Generated by GetComboBoxFormControl - GetComboBoxFormControl */}
<FormikControl
          name="providerSourceID"
          options={providerSourceList || []}
          type="ComboBox"
          showLabel={true}
          label="Provider Source"
          containerClassNames={["min-w-[200px]"]}
          setHasUpdate={handleHasUdpate}
        />
{/* Generated by GetComboBoxFormControl - GetComboBoxFormControl */}
<FormikControl
          name="providerTypeID"
          options={providerTypeList || []}
          type="ComboBox"
          showLabel={true}
          label="Provider Type"
          containerClassNames={["min-w-[200px]"]}
          setHasUpdate={handleHasUdpate}
        />
{/* Generated by GetInputFormControl - Input Form Control */}
<FormikControl
          name="providerContactName"
          type="Text"
          label="Provider Contact Name"
          containerClassNames={["w-full"]}
          
          setHasUpdate={handleHasUdpate}
        />
{/* Generated by GetInputFormControl - Input Form Control */}
<FormikControl
          name="providerEmail"
          type="Text"
          label="Provider Email"
          containerClassNames={["w-full"]}
          
          setHasUpdate={handleHasUdpate}
        />
{/* Generated by GetInputFormControl - Input Form Control */}
<FormikControl
          name="providerContactNumber"
          type="Text"
          label="Provider Contact Number"
          containerClassNames={["w-full"]}
          
          setHasUpdate={handleHasUdpate}
        />
{/* Generated by GetInputFormControl - Input Form Control */}
<FormikControl
          name="email"
          type="Text"
          label="Email"
          containerClassNames={["w-full"]}
          
          setHasUpdate={handleHasUdpate}
        />
{/* Generated by GetInputFormControl - Input Form Control */}
<FormikControl
          name="employer"
          type="Text"
          label="Employer"
          containerClassNames={["w-full"]}
          
          setHasUpdate={handleHasUdpate}
        />
{/* Generated by GetComboBoxFormControl - GetComboBoxFormControl */}
<FormikControl
          name="employerOfficeID"
          options={employerOfficeList || []}
          type="ComboBox"
          showLabel={true}
          label="Employer Office"
          containerClassNames={["min-w-[200px]"]}
          setHasUpdate={handleHasUdpate}
        />
{/* Generated by GetComboBoxFormControl - GetComboBoxFormControl */}
<FormikControl
          name="employerStateID"
          options={CONTROL_OPTIONS.employerStateID}
          type="ComboBox"
          showLabel={true}
          label="Employer State"
          containerClassNames={["min-w-[200px]"]}
          setHasUpdate={handleHasUdpate}
        />
{/* Generated by GetInputFormControl - Input Form Control */}
<FormikControl
          name="employerCandidateID"
          type="Text"
          label="Employer Candidate ID"
          containerClassNames={["w-full"]}
          
          setHasUpdate={handleHasUdpate}
        />
{/* Generated by GetInputFormControl - Input Form Control */}
<FormikControl
          name="employerCandidateOwner"
          type="Text"
          label="Employer Candidate Owner"
          containerClassNames={["w-full"]}
          
          setHasUpdate={handleHasUdpate}
        />
{/* Generated by GetComboBoxFormControl - GetComboBoxFormControl */}
<FormikControl
          name="groupSiteID"
          options={groupSiteList || []}
          type="ComboBox"
          showLabel={true}
          label="Group Site"
          containerClassNames={["min-w-[200px]"]}
          setHasUpdate={handleHasUdpate}
        />
{/* Generated by GetComboBoxFormControl - GetComboBoxFormControl */}
<FormikControl
          name="divisionID"
          options={divisionList || []}
          type="ComboBox"
          showLabel={true}
          label="Division"
          containerClassNames={["min-w-[200px]"]}
          setHasUpdate={handleHasUdpate}
        />
{/* Generated by GetInputFormControl - Input Form Control */}
<FormikControl
          name="wageSubsidyAmount"
          type="Currency"
          label="Wage Subsidy Amount"
          containerClassNames={["w-full"]}
          
          setHasUpdate={handleHasUdpate}
        />
{/* Generated by GetInputFormControl - Input Form Control */}
<FormikControl
          name="benchmarkHours"
          type="Decimal"
          label="Benchmark Hours"
          containerClassNames={["w-full"]}
          
          setHasUpdate={handleHasUdpate}
        />
{/* Generated by GetInputFormControl - Input Form Control */}
<FormikControl
          name="startDate"
          type="Date"
          label="Start Date"
          containerClassNames={["w-full"]}
          
          setHasUpdate={handleHasUdpate}
        />
{/* Generated by GetComboBoxFormControl - GetComboBoxFormControl */}
<FormikControl
          name="statusID"
          options={CONTROL_OPTIONS.statusID}
          type="ComboBox"
          showLabel={true}
          label="Status"
          containerClassNames={["min-w-[200px]"]}
          setHasUpdate={handleHasUdpate}
        />
{/* Generated by GetComboBoxFormControl - GetComboBoxFormControl */}
<FormikControl
          name="stageID"
          options={stageList || []}
          type="ComboBox"
          showLabel={true}
          label="Stage"
          containerClassNames={["min-w-[200px]"]}
          setHasUpdate={handleHasUdpate}
        />
{/* Generated by GetInputFormControl - Input Form Control */}
<FormikControl
          name="outcomeReminder"
          type="Text"
          label="Outcome Reminder"
          containerClassNames={["w-full"]}
          
          setHasUpdate={handleHasUdpate}
        />
{/* Generated by GetInputFormControl - Input Form Control */}
<FormikControl
          name="payslipStatus"
          type="Text"
          label="Payslip Status"
          containerClassNames={["w-full"]}
          
          setHasUpdate={handleHasUdpate}
        />
{/* Generated by GetComboBoxFormControl - GetComboBoxFormControl */}
<FormikControl
          name="priorityID"
          options={priorityList || []}
          type="ComboBox"
          showLabel={true}
          label="Priority"
          containerClassNames={["min-w-[200px]"]}
          setHasUpdate={handleHasUdpate}
        />
{/* Generated by GetFilterSwitchFormControl - Filter Switch Form Control */}
<FormikControl
          containerClassNames={["flex-row"]}
          name="placementSent"
          label="Placement Sent"
          type="Switch"
        />
{/* Generated by GetComboBoxFormControl - GetComboBoxFormControl */}
<FormikControl
          name="placementStatusID"
          options={placementStatusList || []}
          type="ComboBox"
          showLabel={true}
          label="Placement Status"
          containerClassNames={["min-w-[200px]"]}
          setHasUpdate={handleHasUdpate}
        />
{/* Generated by GetFilterSwitchFormControl - Filter Switch Form Control */}
<FormikControl
          containerClassNames={["flex-row"]}
          name="archive"
          label="Archive"
          type="Switch"
        />
{/* Generated by GetFilterSwitchFormControl - Filter Switch Form Control */}
<FormikControl
          containerClassNames={["flex-row"]}
          name="invoiced"
          label="Invoiced"
          type="Switch"
        />
{/* Generated by GetInputFormControl - Input Form Control */}
<FormikControl
          name="invoiceNumber"
          type="Text"
          label="Invoice Number"
          containerClassNames={["w-full"]}
          
          setHasUpdate={handleHasUdpate}
        />
{/* Generated by GetInputFormControl - Input Form Control */}
<FormikControl
          name="enquiryDate"
          type="Date"
          label="Enquiry Date"
          containerClassNames={["w-full"]}
          
          setHasUpdate={handleHasUdpate}
        />
{/* Generated by GetInputFormControl - Input Form Control */}
<FormikControl
          name="enquiryType"
          type="Text"
          label="Enquiry Type"
          containerClassNames={["w-full"]}
          
          setHasUpdate={handleHasUdpate}
        />
{/* Generated by GetInputFormControl - Input Form Control */}
<FormikControl
          name="wSAgreement"
          type="FileInput"
          label="WS Agreement"
          containerClassNames={["w-full"]}
          
          setHasUpdate={handleHasUdpate}
        />
{/* Generated by GetInputFormControl - Input Form Control */}
<FormikControl
          name="wSSchedule"
          type="FileInput"
          label="WS Schedule"
          containerClassNames={["w-full"]}
          
          setHasUpdate={handleHasUdpate}
        />
{/* Generated by GetInputFormControl - Input Form Control */}
<FormikControl
          name="notes"
          type="Textarea"
          label="Notes"
          containerClassNames={["w-full"]}
          
          setHasUpdate={handleHasUdpate}
        />
        
        
        
        <div className="flex gap-2 mt-auto">
          <Button
            type="button"
            size={"sm"}
            variant={"secondary"}
            onClick={(e) => {
              formik.setFieldValue("addNew", true);
              handleSubmitClick(e);
            }}
          >
            Save & Add New
          </Button>
          <Button
            type="button"
            size={"sm"}
            variant={"secondary"}
            onClick={(e) => {
              formik.setFieldValue("addNew", false);
              handleSubmitClick(e);
            }}
          >
            Save
          </Button>
          <Button
            type="button"
            size={"sm"}
            variant={"ghost"}
            onClick={(e) => {
              router.back();
            }}
          >
            Cancel
          </Button>
          {id !== "new" && (
            <Button
              type="button"
              size={"sm"}
              variant={"destructive"}
              onClick={(e) => {
                setRecordsToDelete([formik.values[PRIMARY_KEY].toString()]);
              }}
              className={"ml-auto"}
            >
              <Trash className="w-4 h-4 mr-2" />
              Delete
            </Button>
          )}
        </div>
      </Form>
    );
  };

  useEffect(() => {
    setMounted(true);
    handleFocus();
  }, []);

  return (
    <>
      <Breadcrumb
        links={[
          { name: "Candidates", href: "/candidates" },
          { name: recordName, href: "" },
        ]}
      />
      <Formik
        initialValues={initialValues}
        onSubmit={handleFormikSubmit}
        validateOnChange={false}
        validateOnBlur={false}
        enableReinitialize={true}
        validationSchema={CandidateSchema}
      >
        {renderFormik}
      </Formik>
      <CandidateDeleteDialog
        onSuccess={() => {
          toast({
            description: "Candidate successfully deleted.",
            variant: "success",
            duration: 4000,
          });
          router.back();
        }}
      />
    </>
  );
};

export default CandidateForm;
