//Generated by WriteToModelfilterform_tsx - ModelFilterForm.tsx
"use client";
import { useGroupSiteStore } from "@/hooks/group-sites/useGroupSiteStore";
import {
  GroupSiteFormikFilter,
  GroupSiteSearchParams,
} from "@/interfaces/GroupSiteInterfaces";
import { DEFAULT_LIMIT } from "@/utils/constants";
import { getFilterValueFromURL, getParamsObject } from "@/utils/utilities";
import { encodeParams } from "@/utils/utils";
import { Form, Formik, FormikHelpers, FormikProps } from "formik";
import React, { MouseEventHandler } from "react";
import { DEFAULT_FILTERS,CONTROL_OPTIONS, } from "@/utils/constants/GroupSiteConstants";
import LimitSelector from "@/components/form/LimitSelector";
import { useURL } from "@/hooks/useURL";
import FormikControl from "@/components/form/FormikControl";
import { Button } from "@/components/ui/Button";
import { isEqual } from "lodash";
//Generated by ImportAllUseModelListHookBySeqModel


const GroupSiteFilterForm: React.FC = () => {
  const { router, query, pathname } = useURL<GroupSiteSearchParams>();

  //SearchParams Variables
  const limit = query["limit"] || DEFAULT_LIMIT;

  const defaultFilters = DEFAULT_FILTERS;
  const initialValues: GroupSiteFormikFilter = getFilterValueFromURL(
    query,
    defaultFilters
  );

  //Tanstack queries
  //Generated by GetRequiredQueryFromTanstackBySeqModel


  //Zustand stores
  const [setPage, setLastPage, setFetchCount, resetRowSelection, setCursor] = useGroupSiteStore(
    (state) => [
      state.setPage,
      state.setLastPage,
      state.setFetchCount,
      state.resetRowSelection,
      state.setCursor,
    ]
  );

  const handleFormikSubmit = (
    values: Partial<GroupSiteFormikFilter>,
    formik: FormikHelpers<GroupSiteFormikFilter>
  ) => {
    const params = {
      ...query,
      ...(getParamsObject(values, defaultFilters) as Partial<GroupSiteSearchParams>),
    };

    const newURL = `${pathname}?${encodeParams(params)}`;
    router.push(newURL);
    setFetchCount(true);
    resetRowSelection();
  };

  const handleLimitChange = (value: string) => {
    const params = { ...query, limit: value };
    const newURL = `${pathname}?${encodeParams(params)}`;
    router.push(newURL);
    resetRowSelection();
  };

  const renderFormik = (formik: FormikProps<GroupSiteFormikFilter>) => {

const filtered = isEqual(defaultFilters, formik.values);

    const handleSubmitClick: MouseEventHandler = (e) => {
      e.preventDefault();
      formik.submitForm();
    };

    const handleClearClick: MouseEventHandler = (e) => {
      e.preventDefault();
      formik.setValues(defaultFilters as GroupSiteFormikFilter);
formik.submitForm();
    };


    return (
      <Form className="flex gap-2 w-[750px]" autoComplete="off">
        {/* Generated by GetFormikFilterQControl - GetFormikFilterQControl */}
<FormikControl
  name="q"
  placeholder="Filter Group Sites..."
  type="Text"
  containerClassNames={["w-[250px]"]}
/>
        {/* Generated by GetAllFormikFilterControlBySeqModel */}
<Button
          type="button"
          onClick={handleSubmitClick}
          size={"sm"}
          variant={"secondary"}
        >
          Search
        </Button>
        <Button
          type="button"
          size={"sm"}
          variant={"ghost"}
          disabled={filtered}
          onClick={handleClearClick}
        >
          Clear
        </Button>
      </Form>
    );
  };

  return (
    <div className="flex justify-between w-full">
      <Formik
        initialValues={initialValues}
        onSubmit={handleFormikSubmit}
      >
        {renderFormik}
      </Formik>
      <LimitSelector
        handleLimitChange={handleLimitChange}
        value={limit}
      />
    </div>
  );
};

export default GroupSiteFilterForm;
