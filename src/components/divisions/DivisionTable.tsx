//Generated by WriteToModeltable_tsx - ModelTable.tsx
"use client";
//Generated by GeneratePageFile
import React, { useEffect, useState } from "react";
import { getAxiosParams } from "@/utils/utilities";
import { useDivisionStore } from "@/hooks/divisions/useDivisionStore";
import {
  DivisionFormikInitialValues,
  DivisionSearchParams,
  DivisionUpdatePayload,
  GetDivisionsResponse,
  DivisionDeletePayload
} from "@/interfaces/DivisionInterfaces";
import axiosClient from "@/utils/api";
import {
  InfiniteData,
  useInfiniteQuery,
  useMutation,
  useQueryClient,
} from "@tanstack/react-query";
import { DEFAULT_LIMIT } from "@/utils/constants";
import { useURL } from "@/hooks/useURL";
import { Formik } from "formik";
import { DivisionArraySchema } from "@/schema/DivisionSchema";
import { toast } from "@/hooks/use-toast";
import {
  DEFAULT_FILTERS,
  DEFAULT_FORM_VALUE,
  DEFAULT_SORT_BY,
} from "@/utils/constants/DivisionConstants";
import { useDivisionDeleteDialog } from "@/hooks/divisions/useDivisionDeleteDialog";
import DivisionFormArray from "@/components/divisions/DivisionFormArray";

const DivisionTable: React.FC = () => {
  const { query } = useURL<DivisionSearchParams>();
  const queryClient = useQueryClient();

  ///Local States
  const [mounted, setMounted] = useState(false);

  //SearchParams Variables
  //Generated by GetAllSearchParamsBySeqModel
const q = query["q"] || ""
  const sort = query["sort"] || DEFAULT_SORT_BY;
  const limit = query["limit"] || DEFAULT_LIMIT;

  //Page constants
  const DEFAULT_DIVISION = DEFAULT_FORM_VALUE;

  //Store Variables
  const {
    recordCount,
    setRecordCount,
    lastPage,
    setLastPage,
    setPage,
    fetchCount,
    setFetchCount,
    resetRowSelection,
    currentData,
    setCurrentData,
    setIsUpdating,
  } = useDivisionStore();

  const [setRecordsToDelete, setIsDialogLoading, setMutate] =
    useDivisionDeleteDialog((state) => [
      state.setRecordsToDelete,
      state.setIsDialogLoading,
      state.setMutate,
    ]);

  //API Functions
  const getDivisions = async ({ pageParam = "" }) => {
    //First argument is the queries from the form, second one is so that the queries can be turned into the desired shape while the defaultFilters will be the searchParams not included from the from
    const axiosParams = getAxiosParams({//Generated by GetAllFilterQueryNameBySeqModel
q}, DEFAULT_FILTERS, {
      cursor: pageParam,
      limit,
      sort,
      fetchCount: fetchCount.toString(),
    }) as Partial<DivisionSearchParams>;

    const { data } = await axiosClient.get<GetDivisionsResponse>(`divisions`, {
      params: axiosParams,
    });

    return data;
  };

  const updateDivisions = async (payload: DivisionUpdatePayload) => {
    const { data } = await axiosClient({
      url: "divisions/multi",
      method: "post",
      data: payload,
    }) as { data: { recordsCreated: number } };

    return data;
  };

  const deleteDivisions = async (payload: DivisionDeletePayload) => {
    const { data } = (await axiosClient({
      url: "divisions",
      method: "delete",
      data: payload,
    })) as { data: { recordsDeleted: number } };

    return data;
  };

  //API Functions end here

  //Tanstacks
  const { refetch } = useInfiniteQuery(["divisions"], getDivisions, {
    keepPreviousData: true,
    getNextPageParam: (lastPage) => lastPage.cursor ?? undefined,
    onSuccess: (data) => {
      const dataPageLength = data.pages.length;
      const dataLastPageRowCount = data.pages[dataPageLength - 1].count;

      if (fetchCount) {
  setLastPage(1);
  setPage(1);
  setCurrentData([
    ...data.pages[0].rows.map((item, index) => ({
      ...item,
      index,
      touched: false,
    })),
    {
      ...DEFAULT_DIVISION,
      index: data.pages[dataPageLength - 1].rows.length,
    },
  ]);
} else {
  if (dataPageLength > lastPage) {
    setLastPage(dataPageLength);
    setPage(dataPageLength);
    setCurrentData([
      ...data.pages[dataPageLength - 1].rows.map((item, index) => ({
        ...item,
        index,
        touched: false,
      })),
      {
        ...DEFAULT_DIVISION,
        index: data.pages[dataPageLength - 1].rows.length,
      },
    ]);
  } else {
    setLastPage(1);
    setPage(1);
    setCurrentData([
      ...data.pages[0].rows.map((item, index) => ({
        ...item,
        index,
        touched: false,
      })),
      {
        ...DEFAULT_DIVISION,
        index: data.pages[dataPageLength - 1].rows.length,
      },
    ]);
  }
}



      if (dataLastPageRowCount !== undefined) {
        setFetchCount(false);
        setRecordCount(dataLastPageRowCount);
      }
    },
    enabled: mounted, staleTime: Infinity,
  });

  //Generated by GetMutationSnippets
type MutationData = { recordsCreated?: number; recordsDeleted?: number };
  const useHandleMutation = (
    mutationFunction: (payload: any) => Promise<MutationData>,
    successCallback: (data: MutationData) => string,
    updateRecordCountCallback: (
      recordCount: number,
      data: MutationData
    ) => number
  ) => {
    const { mutate } = useMutation(mutationFunction, {
      onMutate: () => {
        setIsDialogLoading(true);
        setIsUpdating(true);
      },
      onSuccess: (data) => {
        toast({
          description: successCallback(data),
          variant: "success",
          duration: 2000,
        });
        resetRowSelection();
        setRecordCount(updateRecordCountCallback(recordCount, data));
        sliceQueryDataAndRefetch(0);
      },
      onError: (error) => {
        const responseText =
          //@ts-ignore
          error?.response?.statusText || "Something went wrong with the app";
        toast({
          description: responseText,
          variant: "destructive",
          duration: 2000,
        });
      },
      onSettled: () => {
        setIsDialogLoading(false);
        setIsUpdating(false);
        setRecordsToDelete([]);
      },
    });

    return mutate;
  };

  // Usage for deleteDivisionMutation
  const deleteDivisionMutation = useHandleMutation(
    deleteDivisions,
    (data) => {
      return "Division(s) deleted successfully";
    },
    (recordCount, data) => {
      return recordCount - (data.recordsDeleted || 0);
    }
  );

  // Usage for updateDivisions
  const updateDivisionsMutation = useHandleMutation(
    updateDivisions,
    (data) => {
      return "Division list updated successfully";
    },
    (recordCount, data) => {
      return (
        recordCount + (data.recordsCreated || 0) - (data.recordsDeleted || 0)
      );
    }
  );

  //Transformations
  const sliceQueryDataAndRefetch = (idx: number) => {
    queryClient.setQueryData(
      ["divisions"],
      (data: InfiniteData<GetDivisionsResponse> | undefined) => {
        return data
          ? {
              pages: data.pages.slice(0, idx + 1),
              pageParams: data.pageParams.slice(0, idx + 1),
            }
          : undefined;
      }
    );
    refetch();
  };

  //Client Actions
  const handleSubmit = async (values: DivisionFormikInitialValues) => {
    //The reference is the index of the row
    const DivisionsToBeSubmitted = values.Divisions.filter((item) => item.touched);

    if (DivisionsToBeSubmitted.length > 0) {
      const payload: DivisionUpdatePayload = {
        Divisions: DivisionsToBeSubmitted,
      };

      updateDivisionsMutation(payload);
    }
  };

  useEffect(() => {
    setMounted(true);
    setMutate(deleteDivisionMutation);
  }, []);

  useEffect(() => {
    if (mounted) {
      sliceQueryDataAndRefetch(0);
    }
  }, [limit, sort, //Generated by GetAllFilterQueryNameBySeqModel
q]);

  return (
    <Formik
      initialValues={{
        Divisions: currentData,
      }}
      enableReinitialize={true}
      onSubmit={handleSubmit}
      validationSchema={DivisionArraySchema}
      validateOnChange={false}
    >
      {(formik) => <DivisionFormArray formik={formik} />}
    </Formik>
  );
};

export default DivisionTable;
