//Generated by WriteToModellibs_ts - ModelLibs.ts
import { StageFormikShape } from "@/interfaces/StageInterfaces";
import { Stage } from "@/models/StageModel";
import { Op } from "sequelize";
import { Transaction } from "sequelize";

//Reusable functions
export const createStage = async (
  stage: Omit<StageFormikShape, "touched" | "index" | "id">,
  t: Transaction
) => {
  return await Stage.create(
    {
      //Generated by GetAllFieldsToUpdateBySeqModel
name: stage.name!
    },
    { transaction: t }
  );
};

export const updateStage = async (
  stage: Omit<StageFormikShape, "touched" | "index">,
  primaryKey: keyof Omit<StageFormikShape, "touched" | "index">,
  t: Transaction,
  primaryKeyValue?: string | number
) => {
  await Stage.update(
    {
      //Generated by GetAllFieldsToUpdateBySeqModel
name: stage.name!
    },
    {
      where: { [primaryKey]: primaryKeyValue || stage[primaryKey] },
      transaction: t,
      individualHooks: true,
    }
  );
};

export const deleteStages = async (
  primaryKey: keyof Omit<StageFormikShape, "touched">,
  deletedIds: string[] | number[],
  t: Transaction
) => {
  await Stage.destroy({
    where: { [primaryKey]: { [Op.in]: deletedIds } },
    transaction: t,
  });
};
