//Generated by WriteToModellibs_ts - ModelLibs.ts
import { ProviderSourceFormikShape } from "@/interfaces/ProviderSourceInterfaces";
import { ProviderSource } from "@/models/ProviderSourceModel";
import { Op } from "sequelize";
import { Transaction } from "sequelize";

//Reusable functions
export const createProviderSource = async (
  providerSource: Omit<ProviderSourceFormikShape, "touched" | "index" | "id">,
  t: Transaction
) => {
  return await ProviderSource.create(
    {
      //Generated by GetAllFieldsToUpdateBySeqModel
name: providerSource.name!
    },
    { transaction: t }
  );
};

export const updateProviderSource = async (
  providerSource: Omit<ProviderSourceFormikShape, "touched" | "index">,
  primaryKey: keyof Omit<ProviderSourceFormikShape, "touched" | "index">,
  t: Transaction,
  primaryKeyValue?: string | number
) => {
  await ProviderSource.update(
    {
      //Generated by GetAllFieldsToUpdateBySeqModel
name: providerSource.name!
    },
    {
      where: { [primaryKey]: primaryKeyValue || providerSource[primaryKey] },
      transaction: t,
      individualHooks: true,
    }
  );
};

export const deleteProviderSources = async (
  primaryKey: keyof Omit<ProviderSourceFormikShape, "touched">,
  deletedIds: string[] | number[],
  t: Transaction
) => {
  await ProviderSource.destroy({
    where: { [primaryKey]: { [Op.in]: deletedIds } },
    transaction: t,
  });
};
