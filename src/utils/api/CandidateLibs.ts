//Generated by WriteToModellibs_ts - ModelLibs.ts
import { CandidateFormikShape } from "@/interfaces/CandidateInterfaces";
import { Candidate } from "@/models/CandidateModel";
import { Op } from "sequelize";
import { Transaction } from "sequelize";

//Reusable functions
export const createCandidate = async (
  candidate: Omit<CandidateFormikShape, "touched" | "index" | "id">,
  t: Transaction
) => {
  return await Candidate.create(
    {
      //Generated by GetAllFieldsToUpdateBySeqModel
      candidateName: candidate.candidateName!,
      source: candidate.source ? candidate.source! : null,
      candidateState: candidate.candidateState
        ? parseInt(candidate.candidateState as string)
        : null,
      providerID: candidate.providerID
        ? parseInt(candidate.providerID as string)
        : null,
      providerState: candidate.providerState
        ? parseInt(candidate.providerState as string)
        : null,
      providerOffice: candidate.providerOffice
        ? candidate.providerOffice!
        : null,
      providerSource: candidate.providerSource
        ? parseInt(candidate.providerSource as string)
        : null,
      providerType: candidate.providerType
        ? parseInt(candidate.providerType as string)
        : null,
      providerContactName: candidate.providerContactName
        ? candidate.providerContactName!
        : null,
      providerEmail: candidate.providerEmail ? candidate.providerEmail! : null,
      providerContactNumber: candidate.providerContactNumber
        ? candidate.providerContactNumber!
        : null,
      email: candidate.email ? candidate.email! : null,
      employer: candidate.employer ? candidate.employer! : null,
      employerOffice: candidate.employerOffice
        ? parseInt(candidate.employerOffice as string)
        : null,
      employerState: candidate.employerState
        ? parseInt(candidate.employerState as string)
        : null,
      employerCandidateID: candidate.employerCandidateID
        ? candidate.employerCandidateID!
        : null,
      employerCandidateOwner: candidate.employerCandidateOwner
        ? candidate.employerCandidateOwner!
        : null,
      groupSite: candidate.groupSite
        ? parseInt(candidate.groupSite as string)
        : null,
      division: candidate.division
        ? parseInt(candidate.division as string)
        : null,
      wageSubsidyAmount: candidate.wageSubsidyAmount!,
      benchmarkHours: candidate.benchmarkHours!,
      startDate: candidate.startDate!,
      status: candidate.status ? parseInt(candidate.status as string) : null,
      stage: candidate.stage ? parseInt(candidate.stage as string) : null,
      outcomeReminder: candidate.outcomeReminder
        ? candidate.outcomeReminder!
        : null,
      payslipStatus: candidate.payslipStatus ? candidate.payslipStatus! : null,
      priority: candidate.priority
        ? parseInt(candidate.priority as string)
        : null,
      placementSent: candidate.placementSent!,
      placementStatus: candidate.placementStatus
        ? parseInt(candidate.placementStatus as string)
        : null,
      archive: candidate.archive!,
      invoiced: candidate.invoiced!,
      invoiceNumber: candidate.invoiceNumber ? candidate.invoiceNumber! : null,
      enquiryDate: candidate.enquiryDate ? candidate.enquiryDate! : null,
      enquiryType: candidate.enquiryType ? candidate.enquiryType! : null,
      wSAgreement: candidate.wSAgreement ? candidate.wSAgreement! : null,
      wSSchedule: candidate.wSSchedule ? candidate.wSSchedule! : null,
      notes: candidate.notes ? candidate.notes! : null,
    },
    { transaction: t }
  );
};

export const updateCandidate = async (
  candidate: Omit<CandidateFormikShape, "touched" | "index">,
  primaryKey: keyof Omit<CandidateFormikShape, "touched" | "index">,
  t: Transaction,
  primaryKeyValue?: string | number
) => {
  await Candidate.update(
    {
      //Generated by GetAllFieldsToUpdateBySeqModel
      candidateName: candidate.candidateName!,
      source: candidate.source ? candidate.source! : null,
      candidateState: candidate.candidateState
        ? parseInt(candidate.candidateState as string)
        : null,
      providerID: candidate.providerID
        ? parseInt(candidate.providerID as string)
        : null,
      providerState: candidate.providerState
        ? parseInt(candidate.providerState as string)
        : null,
      providerOffice: candidate.providerOffice
        ? candidate.providerOffice!
        : null,
      providerSource: candidate.providerSource
        ? parseInt(candidate.providerSource as string)
        : null,
      providerType: candidate.providerType
        ? parseInt(candidate.providerType as string)
        : null,
      providerContactName: candidate.providerContactName
        ? candidate.providerContactName!
        : null,
      providerEmail: candidate.providerEmail ? candidate.providerEmail! : null,
      providerContactNumber: candidate.providerContactNumber
        ? candidate.providerContactNumber!
        : null,
      email: candidate.email ? candidate.email! : null,
      employer: candidate.employer ? candidate.employer! : null,
      employerOffice: candidate.employerOffice
        ? parseInt(candidate.employerOffice as string)
        : null,
      employerState: candidate.employerState
        ? parseInt(candidate.employerState as string)
        : null,
      employerCandidateID: candidate.employerCandidateID
        ? candidate.employerCandidateID!
        : null,
      employerCandidateOwner: candidate.employerCandidateOwner
        ? candidate.employerCandidateOwner!
        : null,
      groupSite: candidate.groupSite
        ? parseInt(candidate.groupSite as string)
        : null,
      division: candidate.division
        ? parseInt(candidate.division as string)
        : null,
      wageSubsidyAmount: candidate.wageSubsidyAmount!,
      benchmarkHours: candidate.benchmarkHours!,
      startDate: candidate.startDate!,
      status: candidate.status ? parseInt(candidate.status as string) : null,
      stage: candidate.stage ? parseInt(candidate.stage as string) : null,
      outcomeReminder: candidate.outcomeReminder
        ? candidate.outcomeReminder!
        : null,
      payslipStatus: candidate.payslipStatus ? candidate.payslipStatus! : null,
      priority: candidate.priority
        ? parseInt(candidate.priority as string)
        : null,
      placementSent: candidate.placementSent!,
      placementStatus: candidate.placementStatus
        ? parseInt(candidate.placementStatus as string)
        : null,
      archive: candidate.archive!,
      invoiced: candidate.invoiced!,
      invoiceNumber: candidate.invoiceNumber ? candidate.invoiceNumber! : null,
      enquiryDate: candidate.enquiryDate ? candidate.enquiryDate! : null,
      enquiryType: candidate.enquiryType ? candidate.enquiryType! : null,
      wSAgreement: candidate.wSAgreement ? candidate.wSAgreement! : null,
      wSSchedule: candidate.wSSchedule ? candidate.wSSchedule! : null,
      notes: candidate.notes ? candidate.notes! : null,
    },
    {
      where: { [primaryKey]: primaryKeyValue || candidate[primaryKey] },
      transaction: t,
      individualHooks: true,
    }
  );
};

export const deleteCandidates = async (
  primaryKey: keyof Omit<CandidateFormikShape, "touched">,
  deletedIds: string[] | number[],
  t: Transaction
) => {
  await Candidate.destroy({
    where: { [primaryKey]: { [Op.in]: deletedIds } },
    transaction: t,
  });
};
