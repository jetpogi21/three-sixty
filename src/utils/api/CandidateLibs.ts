//Generated by WriteToModellibs_ts - ModelLibs.ts
import { CandidateFormikShape } from "@/interfaces/CandidateInterfaces";
import { Candidate } from "@/models/CandidateModel";
import { Op } from "sequelize";
import { Transaction } from "sequelize";

//Reusable functions
export const createCandidate = async (
  candidate: Omit<CandidateFormikShape, "touched" | "index" | "id">,
  t: Transaction
) => {
  return await Candidate.create(
    {
      //Generated by GetAllFieldsToUpdateBySeqModel
candidateName: candidate.candidateName!,source: candidate.source ? candidate.source! : null,candidateStateID: candidate.candidateStateID ? parseInt(candidate.candidateStateID as string) : null,providerID: candidate.providerID ? parseInt(candidate.providerID as string) : null,providerStateID: candidate.providerStateID ? parseInt(candidate.providerStateID as string) : null,providerOffice: candidate.providerOffice ? candidate.providerOffice! : null,providerSourceID: candidate.providerSourceID ? parseInt(candidate.providerSourceID as string) : null,providerTypeID: candidate.providerTypeID ? parseInt(candidate.providerTypeID as string) : null,providerContactName: candidate.providerContactName ? candidate.providerContactName! : null,providerEmail: candidate.providerEmail ? candidate.providerEmail! : null,providerContactNumber: candidate.providerContactNumber ? candidate.providerContactNumber! : null,email: candidate.email ? candidate.email! : null,employer: candidate.employer ? candidate.employer! : null,employerOfficeID: candidate.employerOfficeID ? parseInt(candidate.employerOfficeID as string) : null,employerStateID: candidate.employerStateID ? parseInt(candidate.employerStateID as string) : null,employerCandidateID: candidate.employerCandidateID ? candidate.employerCandidateID! : null,employerCandidateOwner: candidate.employerCandidateOwner ? candidate.employerCandidateOwner! : null,groupSiteID: candidate.groupSiteID ? parseInt(candidate.groupSiteID as string) : null,divisionID: candidate.divisionID ? parseInt(candidate.divisionID as string) : null,wageSubsidyAmount: candidate.wageSubsidyAmount!,benchmarkHours: candidate.benchmarkHours!,startDate: candidate.startDate!,statusID: candidate.statusID ? parseInt(candidate.statusID as string) : null,stageID: candidate.stageID ? parseInt(candidate.stageID as string) : null,outcomeReminder: candidate.outcomeReminder ? candidate.outcomeReminder! : null,payslipStatus: candidate.payslipStatus ? candidate.payslipStatus! : null,priorityID: candidate.priorityID ? parseInt(candidate.priorityID as string) : null,placementSent: candidate.placementSent!,placementStatusID: candidate.placementStatusID ? parseInt(candidate.placementStatusID as string) : null,archive: candidate.archive!,invoiced: candidate.invoiced!,invoiceNumber: candidate.invoiceNumber ? candidate.invoiceNumber! : null,enquiryDate: candidate.enquiryDate ? candidate.enquiryDate! : null,enquiryType: candidate.enquiryType ? candidate.enquiryType! : null,wSAgreement: candidate.wSAgreement ? candidate.wSAgreement! : null,wSSchedule: candidate.wSSchedule ? candidate.wSSchedule! : null,notes: candidate.notes ? candidate.notes! : null
    },
    { transaction: t }
  );
};

export const updateCandidate = async (
  candidate: Omit<CandidateFormikShape, "touched" | "index">,
  primaryKey: keyof Omit<CandidateFormikShape, "touched" | "index">,
  t: Transaction,
  primaryKeyValue?: string | number
) => {
  await Candidate.update(
    {
      //Generated by GetAllFieldsToUpdateBySeqModel
candidateName: candidate.candidateName!,source: candidate.source ? candidate.source! : null,candidateStateID: candidate.candidateStateID ? parseInt(candidate.candidateStateID as string) : null,providerID: candidate.providerID ? parseInt(candidate.providerID as string) : null,providerStateID: candidate.providerStateID ? parseInt(candidate.providerStateID as string) : null,providerOffice: candidate.providerOffice ? candidate.providerOffice! : null,providerSourceID: candidate.providerSourceID ? parseInt(candidate.providerSourceID as string) : null,providerTypeID: candidate.providerTypeID ? parseInt(candidate.providerTypeID as string) : null,providerContactName: candidate.providerContactName ? candidate.providerContactName! : null,providerEmail: candidate.providerEmail ? candidate.providerEmail! : null,providerContactNumber: candidate.providerContactNumber ? candidate.providerContactNumber! : null,email: candidate.email ? candidate.email! : null,employer: candidate.employer ? candidate.employer! : null,employerOfficeID: candidate.employerOfficeID ? parseInt(candidate.employerOfficeID as string) : null,employerStateID: candidate.employerStateID ? parseInt(candidate.employerStateID as string) : null,employerCandidateID: candidate.employerCandidateID ? candidate.employerCandidateID! : null,employerCandidateOwner: candidate.employerCandidateOwner ? candidate.employerCandidateOwner! : null,groupSiteID: candidate.groupSiteID ? parseInt(candidate.groupSiteID as string) : null,divisionID: candidate.divisionID ? parseInt(candidate.divisionID as string) : null,wageSubsidyAmount: candidate.wageSubsidyAmount!,benchmarkHours: candidate.benchmarkHours!,startDate: candidate.startDate!,statusID: candidate.statusID ? parseInt(candidate.statusID as string) : null,stageID: candidate.stageID ? parseInt(candidate.stageID as string) : null,outcomeReminder: candidate.outcomeReminder ? candidate.outcomeReminder! : null,payslipStatus: candidate.payslipStatus ? candidate.payslipStatus! : null,priorityID: candidate.priorityID ? parseInt(candidate.priorityID as string) : null,placementSent: candidate.placementSent!,placementStatusID: candidate.placementStatusID ? parseInt(candidate.placementStatusID as string) : null,archive: candidate.archive!,invoiced: candidate.invoiced!,invoiceNumber: candidate.invoiceNumber ? candidate.invoiceNumber! : null,enquiryDate: candidate.enquiryDate ? candidate.enquiryDate! : null,enquiryType: candidate.enquiryType ? candidate.enquiryType! : null,wSAgreement: candidate.wSAgreement ? candidate.wSAgreement! : null,wSSchedule: candidate.wSSchedule ? candidate.wSSchedule! : null,notes: candidate.notes ? candidate.notes! : null
    },
    {
      where: { [primaryKey]: primaryKeyValue || candidate[primaryKey] },
      transaction: t,
      individualHooks: true,
    }
  );
};

export const deleteCandidates = async (
  primaryKey: keyof Omit<CandidateFormikShape, "touched">,
  deletedIds: string[] | number[],
  t: Transaction
) => {
  await Candidate.destroy({
    where: { [primaryKey]: { [Op.in]: deletedIds } },
    transaction: t,
  });
};
