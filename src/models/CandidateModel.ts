//Generated by ImportCompleteModelFile
//Generated by GetCompleteModelFile

//Generated by GetModelImports
import {CreationOptional,DataTypes,InferAttributes,InferCreationAttributes,Model,Sequelize} from "sequelize";
import sequelize from "../config/db";
import { State } from "./StateModel";
import { Provider } from "./ProviderModel";
import { ProviderSource } from "./ProviderSourceModel";
import { ProviderType } from "./ProviderTypeModel";
import { EmployerOffice } from "./EmployerOfficeModel";
import { GroupSite } from "./GroupSiteModel";
import { Division } from "./DivisionModel";
import { Stage } from "./StageModel";
import { Priority } from "./PriorityModel";
import { PlacementStatus } from "./PlacementStatusModel";
import { State } from "./StateModel";
import { State } from "./StateModel";
import { State } from "./StateModel";

//Generated by GetModelInterface
export default interface Candidate extends Model<InferAttributes<Candidate>, InferCreationAttributes<Candidate>>
{candidateName: string;
source?: string | null;
candidateStateID?: number | null;
providerID?: number | null;
providerStateID?: number | null;
providerOffice?: string | null;
providerSourceID?: number | null;
providerTypeID?: number | null;
providerContactName?: string | null;
providerEmail?: string | null;
providerContactNumber?: string | null;
email?: string | null;
employer?: string | null;
employerOfficeID?: number | null;
employerStateID?: number | null;
employerCandidateID?: string | null;
employerCandidateOwner?: string | null;
groupSiteID?: number | null;
divisionID?: number | null;
wageSubsidyAmount: string;
benchmarkHours: string;
startDate: string;
statusID?: number | null;
stageID?: number | null;
outcomeReminder?: string | null;
payslipStatus?: string | null;
priorityID?: number | null;
placementSent: boolean;
placementStatusID?: number | null;
archive: boolean;
invoiced: boolean;
invoiceNumber?: string | null;
enquiryDate?: string | null;
enquiryType?: string | null;
wSAgreement?: string | null;
wSSchedule?: string | null;
notes?: string | null;
id: CreationOptional<number>;
createdAt: CreationOptional<Date>;
updatedAt: CreationOptional<Date>}

//Generated by GetModelDefinition
export const Candidate = sequelize.define<Candidate>(
"Candidate",
//Generated by GetModelFieldsDictionary
{
 id: {
  type: DataTypes.BIGINT,
  autoIncrement: true,
  primaryKey: true,
  field: "id"
 }
 ,
 candidateName: {
  type: DataTypes.STRING(100),
  field: "candidate_name"
 }
 ,
 source: {
  type: DataTypes.STRING(50),
  allowNull: true,
  field: "source"
 }
 ,
 candidateStateID: {
  type: DataTypes.BIGINT,
  allowNull: true,
  field: "candidate_state_id"
  ,
  references: //Generated by GetReferencesKeyForModelCreationMigration - references key for model creation
  {
   model: "states",
   key: "id",
  },
  onUpdate: "CASCADE",
  onDelete: "SET NULL"
 },
 providerID: {
  type: DataTypes.BIGINT,
  allowNull: true,
  field: "provider_id"
  ,
  references: //Generated by GetReferencesKeyForModelCreationMigration - references key for model creation
  {
   model: "providers",
   key: "id",
  },
  onUpdate: "CASCADE",
  onDelete: "SET NULL"
 },
 providerStateID: {
  type: DataTypes.BIGINT,
  allowNull: true,
  field: "provider_state_id"
  ,
  references: //Generated by GetReferencesKeyForModelCreationMigration - references key for model creation
  {
   model: "states",
   key: "id",
  },
  onUpdate: "CASCADE",
  onDelete: "SET NULL"
 },
 providerOffice: {
  type: DataTypes.STRING(50),
  allowNull: true,
  field: "provider_office"
 }
 ,
 providerSourceID: {
  type: DataTypes.BIGINT,
  allowNull: true,
  field: "provider_source_id"
  ,
  references: //Generated by GetReferencesKeyForModelCreationMigration - references key for model creation
  {
   model: "provider_sources",
   key: "id",
  },
  onUpdate: "CASCADE",
  onDelete: "SET NULL"
 },
 providerTypeID: {
  type: DataTypes.BIGINT,
  allowNull: true,
  field: "provider_type_id"
  ,
  references: //Generated by GetReferencesKeyForModelCreationMigration - references key for model creation
  {
   model: "provider_types",
   key: "id",
  },
  onUpdate: "CASCADE",
  onDelete: "SET NULL"
 },
 providerContactName: {
  type: DataTypes.STRING(50),
  allowNull: true,
  field: "provider_contact_name"
 }
 ,
 providerEmail: {
  type: DataTypes.STRING(50),
  allowNull: true,
  field: "provider_email"
 }
 ,
 providerContactNumber: {
  type: DataTypes.STRING(50),
  allowNull: true,
  field: "provider_contact_number"
 }
 ,
 email: {
  type: DataTypes.STRING(50),
  allowNull: true,
  field: "email"
 }
 ,
 employer: {
  type: DataTypes.STRING(50),
  allowNull: true,
  field: "employer"
 }
 ,
 employerOfficeID: {
  type: DataTypes.BIGINT,
  allowNull: true,
  field: "employer_office_id"
  ,
  references: //Generated by GetReferencesKeyForModelCreationMigration - references key for model creation
  {
   model: "employer_offices",
   key: "id",
  },
  onUpdate: "CASCADE",
  onDelete: "SET NULL"
 },
 employerStateID: {
  type: DataTypes.BIGINT,
  allowNull: true,
  field: "employer_state_id"
  ,
  references: //Generated by GetReferencesKeyForModelCreationMigration - references key for model creation
  {
   model: "states",
   key: "id",
  },
  onUpdate: "CASCADE",
  onDelete: "SET NULL"
 },
 employerCandidateID: {
  type: DataTypes.STRING(50),
  allowNull: true,
  field: "employer_candidate_id"
 }
 ,
 employerCandidateOwner: {
  type: DataTypes.STRING(50),
  allowNull: true,
  field: "employer_candidate_owner"
 }
 ,
 groupSiteID: {
  type: DataTypes.BIGINT,
  allowNull: true,
  field: "group_site_id"
  ,
  references: //Generated by GetReferencesKeyForModelCreationMigration - references key for model creation
  {
   model: "group_sites",
   key: "id",
  },
  onUpdate: "CASCADE",
  onDelete: "SET NULL"
 },
 divisionID: {
  type: DataTypes.BIGINT,
  allowNull: true,
  field: "division_id"
  ,
  references: //Generated by GetReferencesKeyForModelCreationMigration - references key for model creation
  {
   model: "divisions",
   key: "id",
  },
  onUpdate: "CASCADE",
  onDelete: "SET NULL"
 },
 wageSubsidyAmount: {
  type: DataTypes.DECIMAL(10,2),
  field: "wage_subsidy_amount"
 }
 ,
 benchmarkHours: {
  type: DataTypes.DECIMAL(10,2),
  field: "benchmark_hours"
 }
 ,
 startDate: {
  type: DataTypes.DATEONLY,
  field: "start_date"
 }
 ,
 statusID: {
  type: DataTypes.BIGINT,
  allowNull: true,
  field: "status_id"
  ,
  references: //Generated by GetReferencesKeyForModelCreationMigration - references key for model creation
  {
   model: "states",
   key: "id",
  },
  onUpdate: "CASCADE",
  onDelete: "SET NULL"
 },
 stageID: {
  type: DataTypes.BIGINT,
  allowNull: true,
  field: "stage_id"
  ,
  references: //Generated by GetReferencesKeyForModelCreationMigration - references key for model creation
  {
   model: "stages",
   key: "id",
  },
  onUpdate: "CASCADE",
  onDelete: "SET NULL"
 },
 outcomeReminder: {
  type: DataTypes.STRING(50),
  allowNull: true,
  field: "outcome_reminder"
 }
 ,
 payslipStatus: {
  type: DataTypes.STRING(50),
  allowNull: true,
  field: "payslip_status"
 }
 ,
 priorityID: {
  type: DataTypes.BIGINT,
  allowNull: true,
  field: "priority_id"
  ,
  references: //Generated by GetReferencesKeyForModelCreationMigration - references key for model creation
  {
   model: "priorities",
   key: "id",
  },
  onUpdate: "CASCADE",
  onDelete: "SET NULL"
 },
 placementSent: {
  type: DataTypes.BOOLEAN,
  field: "placement_sent"
 }
 ,
 placementStatusID: {
  type: DataTypes.BIGINT,
  allowNull: true,
  field: "placement_status_id"
  ,
  references: //Generated by GetReferencesKeyForModelCreationMigration - references key for model creation
  {
   model: "placement_status",
   key: "id",
  },
  onUpdate: "CASCADE",
  onDelete: "SET NULL"
 },
 archive: {
  type: DataTypes.BOOLEAN,
  field: "360archive"
 }
 ,
 invoiced: {
  type: DataTypes.BOOLEAN,
  field: "360invoiced"
 }
 ,
 invoiceNumber: {
  type: DataTypes.STRING(50),
  allowNull: true,
  field: "360_invoice_number"
 }
 ,
 enquiryDate: {
  type: DataTypes.DATEONLY,
  allowNull: true,
  field: "360_enquiry_date"
 }
 ,
 enquiryType: {
  type: DataTypes.STRING(50),
  allowNull: true,
  field: "360_enquiry_type"
 }
 ,
 wSAgreement: {
  type: DataTypes.STRING(255),
  allowNull: true,
  field: "wsagreement"
 }
 ,
 wSSchedule: {
  type: DataTypes.STRING(255),
  allowNull: true,
  field: "wsschedule"
 }
 ,
 notes: {
  type: DataTypes.TEXT,
  allowNull: true,
  field: "360notes"
 }
 ,
 createdAt: {
  type: DataTypes.DATE,
  defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
  field: "createdAt"
 },
 updatedAt: {
  type: DataTypes.DATE,
  defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
  field: "updatedAt"
 }}
,
//Generated By GetModelOptionDict
{
  name: {singular: "Candidate",plural:"Candidates"},
  tableName: "candidates"
}
);

//Generated by GenerateSyncModel
export const CandidateSync = async () => {
  try {
    await Candidate.sync({ alter: true });
    console.log("Candidate table has been created!");
  } catch (error) {
    console.error(
      `Unable to create ${"Candidate".toLowerCase()} table:`,
      error
    );
  }
};

//Generated by GenerateModelRelationship
State.hasMany(Candidate, {
  foreignKey: "candidate_state_id",
  onDelete: "SET NULL",
  onUpdate: "CASCADE"
});
Candidate.belongsTo(State, {
  foreignKey: "candidate_state_id",
  onDelete: "SET NULL",
  onUpdate: "CASCADE"
});

//Generated by GenerateModelRelationship
Provider.hasMany(Candidate, {
  foreignKey: "provider_id",
  onDelete: "SET NULL",
  onUpdate: "CASCADE"
});
Candidate.belongsTo(Provider, {
  foreignKey: "provider_id",
  onDelete: "SET NULL",
  onUpdate: "CASCADE"
});

//Generated by GenerateModelRelationship
ProviderSource.hasMany(Candidate, {
  foreignKey: "provider_source_id",
  onDelete: "SET NULL",
  onUpdate: "CASCADE"
});
Candidate.belongsTo(ProviderSource, {
  foreignKey: "provider_source_id",
  onDelete: "SET NULL",
  onUpdate: "CASCADE"
});

//Generated by GenerateModelRelationship
ProviderType.hasMany(Candidate, {
  foreignKey: "provider_type_id",
  onDelete: "SET NULL",
  onUpdate: "CASCADE"
});
Candidate.belongsTo(ProviderType, {
  foreignKey: "provider_type_id",
  onDelete: "SET NULL",
  onUpdate: "CASCADE"
});

//Generated by GenerateModelRelationship
EmployerOffice.hasMany(Candidate, {
  foreignKey: "employer_office_id",
  onDelete: "SET NULL",
  onUpdate: "CASCADE"
});
Candidate.belongsTo(EmployerOffice, {
  foreignKey: "employer_office_id",
  onDelete: "SET NULL",
  onUpdate: "CASCADE"
});

//Generated by GenerateModelRelationship
GroupSite.hasMany(Candidate, {
  foreignKey: "group_site_id",
  onDelete: "SET NULL",
  onUpdate: "CASCADE"
});
Candidate.belongsTo(GroupSite, {
  foreignKey: "group_site_id",
  onDelete: "SET NULL",
  onUpdate: "CASCADE"
});

//Generated by GenerateModelRelationship
Division.hasMany(Candidate, {
  foreignKey: "division_id",
  onDelete: "SET NULL",
  onUpdate: "CASCADE"
});
Candidate.belongsTo(Division, {
  foreignKey: "division_id",
  onDelete: "SET NULL",
  onUpdate: "CASCADE"
});

//Generated by GenerateModelRelationship
Stage.hasMany(Candidate, {
  foreignKey: "stage_id",
  onDelete: "SET NULL",
  onUpdate: "CASCADE"
});
Candidate.belongsTo(Stage, {
  foreignKey: "stage_id",
  onDelete: "SET NULL",
  onUpdate: "CASCADE"
});

//Generated by GenerateModelRelationship
Priority.hasMany(Candidate, {
  foreignKey: "priority_id",
  onDelete: "SET NULL",
  onUpdate: "CASCADE"
});
Candidate.belongsTo(Priority, {
  foreignKey: "priority_id",
  onDelete: "SET NULL",
  onUpdate: "CASCADE"
});

//Generated by GenerateModelRelationship
PlacementStatus.hasMany(Candidate, {
  foreignKey: "placement_status_id",
  onDelete: "SET NULL",
  onUpdate: "CASCADE"
});
Candidate.belongsTo(PlacementStatus, {
  foreignKey: "placement_status_id",
  onDelete: "SET NULL",
  onUpdate: "CASCADE"
});

//Generated by GenerateModelRelationship
State.hasMany(Candidate, {
  foreignKey: "provider_state_id",
  onDelete: "SET NULL",
  onUpdate: "CASCADE"
});
Candidate.belongsTo(State, {
  foreignKey: "provider_state_id",
  onDelete: "SET NULL",
  onUpdate: "CASCADE"
});

//Generated by GenerateModelRelationship
State.hasMany(Candidate, {
  foreignKey: "employer_state_id",
  onDelete: "SET NULL",
  onUpdate: "CASCADE"
});
Candidate.belongsTo(State, {
  foreignKey: "employer_state_id",
  onDelete: "SET NULL",
  onUpdate: "CASCADE"
});

//Generated by GenerateModelRelationship
State.hasMany(Candidate, {
  foreignKey: "status_id",
  onDelete: "SET NULL",
  onUpdate: "CASCADE"
});
Candidate.belongsTo(State, {
  foreignKey: "status_id",
  onDelete: "SET NULL",
  onUpdate: "CASCADE"
});
