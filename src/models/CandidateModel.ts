//Generated by ImportCompleteModelFile
//Generated by GetCompleteModelFile

//Generated by GetModelImports
import {
  CreationOptional,
  DataTypes,
  InferAttributes,
  InferCreationAttributes,
  Model,
  Sequelize,
} from "sequelize";
import sequelize from "../config/db";
import { Provider } from "./ProviderModel";

//Generated by GetModelInterface
export default interface Candidate
  extends Model<
    InferAttributes<Candidate>,
    InferCreationAttributes<Candidate>
  > {
  candidateName: string;
  source?: string | null;
  candidateState?: number | null;
  providerID?: number | null;
  providerState?: number | null;
  providerOffice?: string | null;
  providerSource?: number | null;
  providerType?: number | null;
  providerContactName?: string | null;
  providerEmail?: string | null;
  providerContactNumber?: string | null;
  email?: string | null;
  employer?: string | null;
  employerOffice?: number | null;
  employerState?: number | null;
  employerCandidateID?: string | null;
  employerCandidateOwner?: string | null;
  groupSite?: number | null;
  division?: number | null;
  wageSubsidyAmount: string;
  benchmarkHours: string;
  startDate: string;
  status?: number | null;
  stage?: number | null;
  outcomeReminder?: string | null;
  payslipStatus?: string | null;
  priority?: number | null;
  placementSent: boolean;
  placementStatus?: number | null;
  archive: boolean;
  invoiced: boolean;
  invoiceNumber?: string | null;
  enquiryDate?: string | null;
  enquiryType?: string | null;
  wSAgreement?: string | null;
  wSSchedule?: string | null;
  notes?: string | null;
  id: CreationOptional<number>;
  createdAt: CreationOptional<Date>;
  updatedAt: CreationOptional<Date>;
}

//Generated by GetModelDefinition
export const Candidate = sequelize.define<Candidate>(
  "Candidate",
  //Generated by GetModelFieldsDictionary
  {
    id: {
      type: DataTypes.BIGINT,
      autoIncrement: true,
      primaryKey: true,
      field: "id",
    },
    candidateName: {
      type: DataTypes.STRING(100),
      field: "candidate_name",
    },
    source: {
      type: DataTypes.STRING(50),
      allowNull: true,
      field: "source",
    },
    candidateState: {
      type: DataTypes.BIGINT,
      allowNull: true,
      field: "candidate_state",
    },
    providerID: {
      type: DataTypes.BIGINT,
      allowNull: true,
      field: "provider_id",
      //Generated by GetReferencesKeyForModelCreationMigration - references key for model creation
      references: {
        model: "providers",
        key: "id",
      },
      onUpdate: "CASCADE",
      onDelete: "SET NULL",
    },
    providerState: {
      type: DataTypes.BIGINT,
      allowNull: true,
      field: "provider_state",
    },
    providerOffice: {
      type: DataTypes.STRING(50),
      allowNull: true,
      field: "provider_office",
    },
    providerSource: {
      type: DataTypes.BIGINT,
      allowNull: true,
      field: "provider_source",
    },
    providerType: {
      type: DataTypes.BIGINT,
      allowNull: true,
      field: "provider_type",
    },
    providerContactName: {
      type: DataTypes.STRING(50),
      allowNull: true,
      field: "provider_contact_name",
    },
    providerEmail: {
      type: DataTypes.STRING(50),
      allowNull: true,
      field: "provider_email",
    },
    providerContactNumber: {
      type: DataTypes.STRING(50),
      allowNull: true,
      field: "provider_contact_number",
    },
    email: {
      type: DataTypes.STRING(50),
      allowNull: true,
      field: "email",
    },
    employer: {
      type: DataTypes.STRING(50),
      allowNull: true,
      field: "employer",
    },
    employerOffice: {
      type: DataTypes.BIGINT,
      allowNull: true,
      field: "employer_office",
    },
    employerState: {
      type: DataTypes.BIGINT,
      allowNull: true,
      field: "employer_state",
    },
    employerCandidateID: {
      type: DataTypes.STRING(50),
      allowNull: true,
      field: "employer_candidate_id",
    },
    employerCandidateOwner: {
      type: DataTypes.STRING(50),
      allowNull: true,
      field: "employer_candidate_owner",
    },
    groupSite: {
      type: DataTypes.BIGINT,
      allowNull: true,
      field: "group_site",
    },
    division: {
      type: DataTypes.BIGINT,
      allowNull: true,
      field: "division",
    },
    wageSubsidyAmount: {
      type: DataTypes.DECIMAL(10, 2),
      field: "wage_subsidy_amount",
    },
    benchmarkHours: {
      type: DataTypes.DECIMAL(10, 2),
      field: "benchmark_hours",
    },
    startDate: {
      type: DataTypes.DATEONLY,
      field: "start_date",
    },
    status: {
      type: DataTypes.BIGINT,
      allowNull: true,
      field: "status",
    },
    stage: {
      type: DataTypes.BIGINT,
      allowNull: true,
      field: "stage",
    },
    outcomeReminder: {
      type: DataTypes.STRING(50),
      allowNull: true,
      field: "outcome_reminder",
    },
    payslipStatus: {
      type: DataTypes.STRING(50),
      allowNull: true,
      field: "payslip_status",
    },
    priority: {
      type: DataTypes.BIGINT,
      allowNull: true,
      field: "priority",
    },
    placementSent: {
      type: DataTypes.BOOLEAN,
      field: "placement_sent",
    },
    placementStatus: {
      type: DataTypes.BIGINT,
      allowNull: true,
      field: "placement_status",
    },
    archive: {
      type: DataTypes.BOOLEAN,
      field: "360archive",
    },
    invoiced: {
      type: DataTypes.BOOLEAN,
      field: "360invoiced",
    },
    invoiceNumber: {
      type: DataTypes.STRING(50),
      allowNull: true,
      field: "360_invoice_number",
    },
    enquiryDate: {
      type: DataTypes.DATEONLY,
      allowNull: true,
      field: "360_enquiry_date",
    },
    enquiryType: {
      type: DataTypes.STRING(50),
      allowNull: true,
      field: "360_enquiry_type",
    },
    wSAgreement: {
      type: DataTypes.STRING(255),
      allowNull: true,
      field: "wsagreement",
    },
    wSSchedule: {
      type: DataTypes.STRING(255),
      allowNull: true,
      field: "wsschedule",
    },
    notes: {
      type: DataTypes.TEXT,
      allowNull: true,
      field: "360notes",
    },
    createdAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
      field: "createdAt",
    },
    updatedAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
      field: "updatedAt",
    },
  },
  //Generated By GetModelOptionDict
  {
    name: { singular: "Candidate", plural: "Candidates" },
    tableName: "candidates",
  }
);

//Generated by GenerateSyncModel
export const CandidateSync = async () => {
  try {
    await Candidate.sync({ alter: true });
    console.log("Candidate table has been created!");
  } catch (error) {
    console.error(
      `Unable to create ${"Candidate".toLowerCase()} table:`,
      error
    );
  }
};

//Generated by GenerateModelRelationship
Provider.hasMany(Candidate, {
  foreignKey: "provider_id",
  onDelete: "SET NULL",
  onUpdate: "CASCADE",
});
Candidate.belongsTo(Provider, {
  foreignKey: "provider_id",
  onDelete: "SET NULL",
  onUpdate: "CASCADE",
});
