//Generated by GetuseModelListts - useModelList.ts
"use client";
import { GetProviderTypesResponse } from "@/interfaces/ProviderTypeInterfaces";
import { ProviderTypeSearchParams } from "@/interfaces/ProviderTypeInterfaces";
import { BasicModel } from "@/interfaces/GeneralInterfaces";
import axiosClient from "@/utils/api";
import { useQuery } from "@tanstack/react-query";
import { useEffect, useState } from "react";

const getProviderTypes = async () => {
  const { data } = await axiosClient.get<GetProviderTypesResponse>(`provider-types`, {
    params: {
      fetchCount: "false",
      simpleOnly: "true",
    } as Partial<ProviderTypeSearchParams>,
  });

  return data.rows.map((item) => ({
    id: item.id,
    name: item.name,
  }));
};

interface UseListProps {
  placeholderData?: BasicModel[];
}

const useProviderTypeList = (prop?: UseListProps) => {
  //local states
  const [mounted, setMounted] = useState(false);

  const _ = useQuery({
    queryKey: ["providerType-list"],
    queryFn: getProviderTypes,
    enabled: mounted,
    placeholderData: prop?.placeholderData,
  });

  useEffect(() => {
    setMounted(true);
  }, []);

  return _;
};

export default useProviderTypeList;
